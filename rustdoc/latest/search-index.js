var searchIndex = JSON.parse('{\
"equihash":{"doc":"Equihash is a Proof-of-Work algorithm, based on a …","t":[3,11,11,11,11,11,11,5,11,11,11,11,11],"n":["Error","borrow","borrow_mut","fmt","fmt","from","into","is_valid_solution","provide","to_string","try_from","try_into","type_id"],"q":["equihash","","","","","","","","","","","",""],"d":["An Equihash solution failed to verify.","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Checks whether <code>soln</code> is a valid solution for <code>(input, nonce)</code> …","","","","",""],"i":[0,1,1,1,1,1,1,0,1,1,1,1,1],"f":[0,[[]],[[]],[[1,2],3],[[1,2],3],[[]],[[]],[[4,4],[[5,[1]]]],[6],[[],7],[[],5],[[],5],[[],8]],"p":[[3,"Error"],[3,"Formatter"],[6,"Result"],[15,"u32"],[4,"Result"],[3,"Demand"],[3,"String"],[3,"TypeId"]]},\
"f4jumble":{"doc":"This crate provides a mechanism for “jumbling” byte …","t":[4,13,17,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11],"n":["Error","InvalidLength","VALID_LENGTH","borrow","borrow_mut","f4jumble","f4jumble_inv","f4jumble_inv_mut","f4jumble_mut","fmt","fmt","from","into","provide","to_string","try_from","try_into","type_id"],"q":["f4jumble","","","","","","","","","","","","","","","","",""],"d":["Errors produced by F4Jumble.","Value error indicating that length of F4Jumbled message …","Length of F4Jumbled message must lie in the range …","","","Encodes the given message using F4Jumble, and returns the …","Decodes the given message using F4Jumble⁻¹, and returns …","Decodes the given message in-place using F4Jumble⁻¹.","Encodes the given message in-place using F4Jumble.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,3,0,3,3,0,0,0,0,3,3,3,3,3,3,3,3,3],"f":[0,0,0,[[]],[[]],[[],[[4,[[2,[1]],3]]]],[[],[[4,[[2,[1]],3]]]],[[],[[4,[3]]]],[[],[[4,[3]]]],[[3,5],6],[[3,5],6],[[]],[[]],[7],[[],8],[[],4],[[],4],[[],9]],"p":[[15,"u8"],[3,"Vec"],[4,"Error"],[4,"Result"],[3,"Formatter"],[6,"Result"],[3,"Demand"],[3,"String"],[3,"TypeId"]]},\
"zcash_address":{"doc":"","t":[4,16,16,13,13,13,4,13,4,13,13,8,8,8,13,13,3,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,10,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,17,3,13,8,13,8,4,13,13,13,16,4,13,13,13,13,13,13,13,13,13,13,13,13,4,4,13,13,13,13,4,3,3,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12],"n":["ConversionError","Error","Error","IncorrectNetwork","InvalidEncoding","Main","Network","NotZcash","ParseError","Regtest","Test","ToAddress","TryFromAddress","TryFromRawAddress","Unified","Unsupported","UnsupportedAddress","User","ZcashAddress","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","convert","convert_if_network","encode","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_sapling","from_sapling","from_sprout","from_sprout","from_str","from_transparent_p2pkh","from_transparent_p2pkh","from_transparent_p2sh","from_transparent_p2sh","from_unified","from_unified","hash","hash","into","into","into","into","into","provide","provide","provide","source","test_vectors","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from_encoded","try_from_raw_sapling","try_from_raw_sapling","try_from_raw_sprout","try_from_raw_sprout","try_from_raw_transparent_p2pkh","try_from_raw_transparent_p2pkh","try_from_raw_transparent_p2sh","try_from_raw_transparent_p2sh","try_from_raw_unified","try_from_raw_unified","try_from_sapling","try_from_sapling","try_from_sprout","try_from_sprout","try_from_transparent_p2pkh","try_from_transparent_p2pkh","try_from_transparent_p2sh","try_from_transparent_p2sh","try_from_unified","try_from_unified","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unified","actual","expected","UNIFIED","Address","BothP2phkAndP2sh","Container","DuplicateTypecode","Encoding","Fvk","InvalidEncoding","InvalidTypecodeOrder","InvalidTypecodeValue","Item","Ivk","NotUnified","OnlyTransparent","Orchard","Orchard","Orchard","Orchard","P2pkh","P2pkh","P2pkh","P2pkh","P2sh","P2sh","ParseError","Receiver","Sapling","Sapling","Sapling","Sapling","Typecode","Ufvk","Uivk","Unknown","Unknown","Unknown","Unknown","UnknownPrefix","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","decode","decode","encode","encode","encoding_order","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","items","items","items_as_parsed","items_as_parsed","items_as_parsed","items_as_parsed","preference_order","provide","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_items","try_from_items","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","data","typecode","data","typecode","data","typecode"],"q":["zcash_address","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_address::ConversionError","","zcash_address::test_vectors","zcash_address::unified","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_address::unified::Fvk","","zcash_address::unified::Ivk","","zcash_address::unified::Receiver",""],"d":["An error encountered while converting a parsed <code>ZcashAddress</code>…","Conversion errors for the user type (e.g. failing to parse …","Conversion errors for the user type (e.g. failing to parse …","The address is for the wrong network.","The string is an invalid encoding.","Zcash Mainnet.","The Zcash network for which an address is encoded.","The string is not a Zcash address.","An error while attempting to parse a string as a Zcash …","Private integration / regression testing, used in <code>zcashd</code>.","Zcash Testnet.","A helper trait for converting another type into a …","A helper trait for converting a <code>ZcashAddress</code> into another …","A helper trait for converting a <code>ZcashAddress</code> into a …","Errors specific to unified addresses.","The address type is not supported by the target type.","An address type is not supported for conversion.","A conversion error returned by the target type.","A Zcash address.","","","","","","","","","","","","","","","Converts this address into another type.","Converts this address into another type, if it matches the …","Encodes this Zcash address in its canonical string …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Attempts to parse the given string as a Zcash address.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Attempts to parse the given string as a Zcash address.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Export test vectors for reuse by implementers of address …","A Unified Address.","The unified container contains both P2PKH and P2SH items.","Trait for for Unified containers, that exposes the items …","The unified container contains a duplicated typecode.","Trait providing common encoding and decoding logic for …","The set of known FVKs for Unified FVKs.","The string is an invalid encoding.","The items in the unified container are not in typecode …","The parsed typecode exceeds the maximum allowed …","The type of item in this unified container.","The set of known IVKs for Unified IVKs.","The string is not Bech32m encoded, and so cannot be a …","The unified container only contains transparent items.","","The raw encoding of an Orchard Full Viewing Key.","The raw encoding of an Orchard Incoming Viewing Key.","","","A pruned version of the extended public key for the BIP 44 …","A pruned version of the extended public key for the BIP 44 …","","","","An error while attempting to parse a string as a Zcash …","The set of known Receivers for Unified Addresses.","","Data contained within the Sapling component of a Unified …","Data contained within the Sapling component of a Unified …","","","A Unified Full Viewing Key.","A Unified Incoming Viewing Key.","","","","","The Bech32m string has an unrecognized human-readable …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Decodes a unified container from its string …","Decodes a unified container from its string …","Encodes the contents of the unified container to its …","Encodes the contents of the unified container to its …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the items contained within this container, sorted …","Returns the items contained within this container, sorted …","Returns the items in the order they were parsed from the …","","Returns the FVKs contained within this UFVK, in the order …","Returns the IVKs contained within this UIVK, in the order …","","","","","","","","","","","","","","","","","","","","","","","Constructs a value of a unified container type from a …","Constructs a value of a unified container type from a …","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,6,3,4,8,2,0,8,0,2,2,0,0,0,8,4,0,4,0,10,4,8,1,2,10,4,8,1,2,1,2,1,2,1,1,1,8,1,2,10,10,4,4,8,8,1,1,2,10,4,4,4,8,8,1,2,32,1,32,1,1,32,1,32,1,32,1,1,2,10,4,8,1,2,10,4,8,4,0,1,2,10,4,8,1,10,4,8,1,2,1,6,6,6,6,6,6,6,6,6,6,3,3,3,3,3,3,3,3,3,3,10,4,8,1,2,10,4,8,1,2,0,33,33,0,0,16,0,16,0,0,16,16,16,34,0,16,16,23,24,26,28,23,24,26,28,23,28,0,0,23,24,26,28,0,0,0,23,24,26,28,16,23,18,24,25,26,27,28,16,23,18,24,25,26,27,28,16,23,18,24,25,26,27,28,23,18,24,25,26,27,28,35,35,35,35,28,23,18,24,25,26,27,28,16,23,18,24,25,26,27,28,16,16,23,18,24,25,26,27,28,16,23,18,24,25,26,27,28,23,18,24,25,26,27,28,16,34,34,34,18,25,27,28,16,23,18,24,25,26,27,28,16,23,23,18,24,24,25,26,26,27,28,28,16,35,35,23,18,24,25,26,27,28,16,23,18,24,25,26,27,28,16,36,36,37,37,38,38],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[[]],[[]],[1,[[5,[3,4]]]],[[1,2],[[5,[6,4]]]],[1,7],[[8,8],9],[[1,1],9],[[2,2],9],[[10,11],12],[[10,11],12],[[[4,[13]],11],12],[[[4,[14]],11],12],[[8,11],12],[[8,11],12],[[1,11],12],[[1,11],12],[[2,11],12],[[]],[[]],[[],4],[15],[[]],[16,8],[[]],[[]],[2],[2,1],[2],[2,1],[17,[[5,[1]]]],[2],[2,1],[2],[2,1],[[2,18]],[[2,18],1],[1],[2],[[]],[[]],[[]],[[]],[[]],[19],[19],[19],[[[4,[20]]],[[21,[20]]]],0,[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],5],[[],5],[[],5],[[],5],[[],5],[17,[[5,[1,8]]]],[[],[[5,[4]]]],[[],[[5,[4]]]],[[],[[5,[4]]]],[[],[[5,[4]]]],[[],[[5,[4]]]],[[],[[5,[4]]]],[[],[[5,[4]]]],[[],[[5,[4]]]],[18,[[5,[4]]]],[18,[[5,[4]]]],[2,[[5,[4]]]],[2,[[5,[4]]]],[2,[[5,[4]]]],[2,[[5,[4]]]],[2,[[5,[4]]]],[2,[[5,[4]]]],[2,[[5,[4]]]],[2,[[5,[4]]]],[[2,18],[[5,[4]]]],[[2,18],[[5,[4]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],22],[[],22],[[],22],[[],22],[[],22],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[23,23],[18,18],[24,24],[25,25],[26,26],[27,27],[28,28],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[17,[[5,[16]]]],[17,[[5,[16]]]],[2,7],[2,7],[[28,28],29],[[23,23],9],[[18,18],9],[[24,24],9],[[25,25],9],[[26,26],9],[[27,27],9],[[28,28],9],[[16,16],9],[[23,11],12],[[18,11],12],[[24,11],12],[[25,11],12],[[26,11],12],[[27,11],12],[[28,11],12],[[16,11],12],[[16,11],12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[23],[18],[24],[25],[26],[27],[28],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],30],[[],30],[[]],[18],[25],[27],[[28,28],29],[19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],7],[[],5],[[],[[5,[23]]]],[[],5],[[],5],[[],[[5,[24]]]],[[],5],[[],[[5,[26]]]],[[],5],[[],5],[31,[[5,[28]]]],[[],5],[[],5],[30,[[5,[16]]]],[30,[[5,[16]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],0,0,0,0,0,0],"p":[[3,"ZcashAddress"],[4,"Network"],[8,"TryFromAddress"],[4,"ConversionError"],[4,"Result"],[8,"TryFromRawAddress"],[3,"String"],[4,"ParseError"],[15,"bool"],[3,"UnsupportedAddress"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[8,"Display"],[15,"never"],[4,"ParseError"],[15,"str"],[3,"Address"],[3,"Demand"],[8,"Error"],[4,"Option"],[3,"TypeId"],[4,"Receiver"],[4,"Fvk"],[3,"Ufvk"],[4,"Ivk"],[3,"Uivk"],[4,"Typecode"],[4,"Ordering"],[3,"Vec"],[15,"u32"],[8,"ToAddress"],[13,"IncorrectNetwork"],[8,"Container"],[8,"Encoding"],[13,"Unknown"],[13,"Unknown"],[13,"Unknown"]]},\
"zcash_client_backend":{"doc":"<em>A crate for implementing Zcash light clients.</em>","t":[3,13,13,4,13,12,0,11,11,11,11,11,11,0,5,11,11,11,11,11,11,0,11,11,0,11,11,11,11,12,11,11,11,11,11,11,0,12,12,0,0,12,11,12,11,11,11,11,11,11,11,11,0,0,0,3,4,13,13,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,16,13,16,4,3,4,13,13,3,3,13,13,16,13,16,8,8,12,10,12,12,10,12,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,12,10,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,11,10,10,10,10,11,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,12,12,12,10,12,10,10,12,10,10,10,0,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,12,11,11,11,11,11,11,0,8,16,0,5,0,5,10,13,13,4,13,3,4,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,4,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5,0,5,5,13,13,13,16,16,16,3,4,8,4,13,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,8,13,4,13,16,13,13,13,4,13,11,11,11,11,11,11,10,5,5,5,5,11,11,11,11,11,11,10,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,13,4,8,4,4,13,3,16,16,13,13,13,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,4,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,0,0,3,3,3,3,3,12,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,4,13,3,3,3,3,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,12,12,12,12,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,16,16,16,8,16,10,5,10,13,13,13,13,3,13,13,3,13,4,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,5,5,12,11,12,11,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,17,5,5,5,5,5,5],"n":["DecryptedOutput","Incoming","Outgoing","TransferType","WalletInternal","account","address","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","data_api","decrypt_transaction","deref","deref","deref_mut","deref_mut","drop","drop","encoding","eq","equivalent","fees","fmt","from","from","from_ref","index","init","init","into","into","into_request","into_request","keys","memo","note","proto","scan","to","to_owned","transfer_type","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","wallet","welding_rig","zip321","AddressMetadata","RecipientAddress","Shielded","Transparent","Unified","UnifiedAddress","account","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","decode","decode","deref","deref","deref","deref_mut","deref_mut","deref_mut","diversifier_index","drop","drop","drop","encode","encode","encode","eq","eq","equivalent","fmt","fmt","from","from","from","from","from","from","from_receivers","from_ref","from_ref","init","init","init","into","into","into","into_request","into_request","into_request","new","orchard","sapling","to_owned","to_owned","transparent","try_from","try_from","try_from","try_from","try_from_raw_sapling","try_from_raw_transparent_p2pkh","try_from_raw_transparent_p2sh","try_from_raw_unified","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","DecryptedTransaction","Error","InternalAccount","NoteRef","PoolType","PrunedBlock","Recipient","Sapling","Sapling","SentTransaction","SentTransactionOutput","Transparent","Transparent","TxRef","Unified","UtxoRef","WalletRead","WalletWrite","account","advance_by_block","block_hash","block_height","block_height_extrema","block_time","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","clone","clone","clone_into","clone_into","commitment_tree","create_account","created","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","eq","equivalent","error","fee_amount","fmt","fmt","from","from","from","from","from","from","from_ref","from_ref","get_account_for_ufvk","get_all_nullifiers","get_balance_at","get_block_hash","get_commitment_tree","get_current_address","get_max_height_hash","get_memo","get_next_available_address","get_nullifiers","get_spendable_sapling_notes","get_target_and_anchor_heights","get_transaction","get_transparent_balances","get_transparent_receivers","get_tx_height","get_unified_full_viewing_keys","get_unspent_transparent_outputs","get_witnesses","init","init","init","init","init","init","into","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","into_request","is_valid_account_extfvk","memo","output_index","outputs","put_received_transparent_utxo","recipient","remove_unmined_tx","rewind_to_height","sapling_outputs","select_spendable_sapling_notes","store_decrypted_tx","store_sent_tx","testing","to_owned","to_owned","transactions","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","tx","tx","type_id","type_id","type_id","type_id","type_id","type_id","utxos_spent","value","vzip","vzip","vzip","vzip","vzip","vzip","wallet","BlockSource","Error","error","scan_cached_blocks","testing","validate_chain","with_blocks","BlockHeightDiscontinuity","BlockSource","Cause","Chain","ChainError","Error","InvalidNewWitnessAnchor","InvalidWitnessAnchor","PrevHashMismatch","Wallet","at_height","block_height_discontinuity","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_ref","from_ref","init","init","init","into","into","into","into_request","into_request","into_request","invalid_new_witness_anchor","invalid_witness_anchor","prev_hash_mismatch","provide","source","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","index","node","txid","MockBlockSource","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","into_request","try_from","try_into","type_id","vzip","with_blocks","AccountNotFound","AddressNotRecognized","BalanceError","Builder","ChildIndexOutOfRange","DataSource","Error","InsufficientFunds","KeyNotRecognized","MemoForbidden","NoteMismatch","NoteSelection","ScanRequired","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from","from","from","from","from","init","into","into_request","provide","source","to_string","try_from","try_into","type_id","vzip","available","required","MockWalletDb","advance_by_block","block_height_extrema","borrow","borrow_mut","create_account","deref","deref_mut","drop","from","get_account_for_ufvk","get_all_nullifiers","get_balance_at","get_block_hash","get_commitment_tree","get_current_address","get_memo","get_next_available_address","get_nullifiers","get_spendable_sapling_notes","get_transaction","get_transparent_balances","get_transparent_receivers","get_tx_height","get_unified_full_viewing_keys","get_unspent_transparent_outputs","get_witnesses","init","into","into_request","is_valid_account_extfvk","network","put_received_transparent_utxo","remove_unmined_tx","rewind_to_height","select_spendable_sapling_notes","store_decrypted_tx","store_sent_tx","try_from","try_into","type_id","vzip","create_spend_to_address","decrypt_and_store_transaction","input_selection","shield_transparent_funds","spend","Balance","Change","DataSource","DataSource","Error","FeeRule","GreedyInputSelector","GreedyInputSelectorError","InputSelector","InputSelectorError","InsufficientFunds","Proposal","Selection","UnsupportedAddress","balance","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","eq","equivalent","fee_rule","fmt","fmt","fmt","from","from","from","from","from","from","from","from_ref","init","init","init","init","into","into","into","into","into_request","into_request","into_request","into_request","new","propose_shielding","propose_shielding","propose_transaction","propose_transaction","sapling_inputs","to_owned","to_string","to_string","transaction_request","transparent_inputs","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","available","required","AddressCodec","Base58","Bech32DecodeError","Bech32Error","Error","HrpMismatch","IncorrectVariant","ReadError","TransparentCodecError","UnsupportedAddressType","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","decode","decode_extended_full_viewing_key","decode_extended_spending_key","decode_payment_address","decode_transparent_address","deref","deref","deref_mut","deref_mut","drop","drop","encode","encode_extended_full_viewing_key","encode_extended_spending_key","encode_payment_address","encode_payment_address_p","encode_transparent_address","encode_transparent_address_p","eq","equivalent","fmt","fmt","fmt","fmt","from","from","from","from_ref","init","init","into","into","into_request","into_request","provide","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","actual","expected","AddDustToFee","AllowDustChange","ChangeError","ChangeStrategy","ChangeValue","DustAction","DustInputs","DustOutputPolicy","Error","FeeRule","InsufficientFunds","Reject","Sapling","StrategyError","TransactionBalance","action","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","compute_balance","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","dust_threshold","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","fee_required","fee_rule","fixed","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_ref","from_ref","from_ref","from_ref","from_ref","init","init","init","init","init","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","new","new","proposed_change","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","total","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","value","vzip","vzip","vzip","vzip","vzip","zip317","available","required","sapling","transparent","SingleOutputChangeStrategy","borrow","borrow_mut","compute_balance","deref","deref_mut","drop","fee_rule","from","init","into","into_request","new","try_from","try_into","type_id","vzip","SingleOutputChangeStrategy","borrow","borrow_mut","compute_balance","deref","deref_mut","drop","fee_rule","from","init","into","into_request","new","try_from","try_into","type_id","vzip","DecodingError","Era","EraInvalid","EraMismatch","InsufficientData","KeyDataInvalid","LengthInvalid","LengthMismatch","Orchard","ReadError","TypecodeInvalid","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","equivalent","equivalent","fmt","fmt","from","from","init","init","into","into","into_request","into_request","sapling","testing","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","DiversifiableFullViewingKey","ExtendedFullViewingKey","ExtendedSpendingKey","address","address","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","change_address","clone","clone","clone","clone_into","clone_into","clone_into","decrypt_diversifier","default_address","default_address","default_address","deref","deref","deref","deref_mut","deref_mut","deref_mut","derive_child","derive_child","derive_internal","derive_internal","diversified_address","diversified_change_address","drop","drop","drop","eq","eq","expsk","find_address","find_address","fmt","fmt","fmt","from","from","from","from","from","from_bytes","from_bytes","from_path","from_ref","from_ref","from_ref","fvk","fvk","init","init","init","into","into","into","into_request","into_request","into_request","master","read","read","sapling_nf","spending_key","to_bytes","to_bytes","to_diversifiable_full_viewing_key","to_diversifiable_full_viewing_key","to_extended_full_viewing_key","to_ivk","to_nk","to_ovk","to_owned","to_owned","to_owned","to_sapling_keys","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","write","write","arb_unified_spending_key","compact_formats","service","CompactBlock","CompactOrchardAction","CompactSaplingOutput","CompactSaplingSpend","CompactTx","actions","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ciphertext","ciphertext","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmu","cmu","cmx","default","default","default","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","ephemeral_key","ephemeral_key","ephemeral_key","eq","eq","eq","eq","eq","fee","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_ref","from_ref","from_ref","from_ref","from_ref","hash","hash","hash","header","header","height","height","index","init","init","init","init","init","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","nf","nf","nullifier","outputs","prev_hash","prev_hash","proto_version","spends","time","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","txid","type_id","type_id","type_id","type_id","type_id","vtx","vzip","vzip","vzip","vzip","vzip","Address","AddressList","Balance","BlockId","BlockRange","ChainSpec","Duration","Empty","Exclude","GetAddressUtxosArg","GetAddressUtxosReply","GetAddressUtxosReplyList","LightdInfo","PingResponse","RawTransaction","SendResponse","TransparentAddressBlockFilter","TreeState","TxFilter","address","address","address","address_utxos","addresses","addresses","block","block_height","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","branch","build_date","build_user","chain_name","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","compact_tx_streamer_client","consensus_branch_id","data","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","end","entry","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","error_code","error_message","estimated_height","exit","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","git_commit","hash","hash","hash","height","height","height","height","index","index","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","interval_us","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","max_entries","network","orchard_tree","range","sapling_activation_height","sapling_tree","script","start","start_height","taddr_support","time","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","txid","txid","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value_zat","value_zat","vendor","version","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","zcashd_build","zcashd_subversion","CompactTxStreamerClient","accept_compressed","borrow","borrow_mut","clone","clone_into","connect","deref","deref_mut","drop","fmt","from","from_ref","get_address_utxos","get_address_utxos_stream","get_block","get_block_range","get_latest_block","get_latest_tree_state","get_lightd_info","get_mempool_stream","get_mempool_tx","get_taddress_balance","get_taddress_balance_stream","get_taddress_txids","get_transaction","get_tree_state","init","into","into_request","new","ping","send_compressed","send_transaction","to_owned","try_from","try_into","type_id","vzip","with_interceptor","with_origin","Custom","Discard","OvkPolicy","Sender","SpendableNote","WalletShieldedOutput","WalletShieldedSpend","WalletTransparentOutput","WalletTx","account","account","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmu","coin","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","diversifier","drop","drop","drop","drop","drop","drop","ephemeral_key","fmt","from","from","from","from","from","from","from_parts","from_ref","height","index","index","index","init","init","init","init","init","init","into","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","into_request","is_change","nf","nf","note","note_id","note_id","note_value","num_outputs","num_spends","outpoint","outpoint","recipient_address","rseed","shielded_outputs","shielded_spends","to","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","txid","txout","type_id","type_id","type_id","type_id","type_id","type_id","value","value","vzip","vzip","vzip","vzip","vzip","vzip","witness","witness","Nf","SaplingKeys","SaplingNk","ScanningKey","Scope","sapling_nf","scan_block","to_sapling_keys","DuplicateParameter","InvalidBase64","MemoBytesError","ParseError","Payment","RecipientMissing","TooManyPayments","TransactionRequest","TransparentMemo","Zip321Error","amount","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","empty","eq","eq","fmt","fmt","fmt","from","from","from","from_uri","init","init","init","into","into","into","into_request","into_request","into_request","label","memo","memo_from_base64","memo_to_base64","message","new","other_params","payments","recipient_address","testing","to_uri","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","VALID_PARAMNAME","arb_addr","arb_addr_str","arb_valid_memo","arb_zip321_payment","arb_zip321_request","arb_zip321_uri"],"q":["zcash_client_backend","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_client_backend::address","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_client_backend::data_api","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_client_backend::data_api::chain","","","","","","","zcash_client_backend::data_api::chain::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_client_backend::data_api::chain::error::Cause","","","zcash_client_backend::data_api::chain::testing","","","","","","","","","","","","","","","zcash_client_backend::data_api::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_client_backend::data_api::error::Error","","zcash_client_backend::data_api::testing","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_client_backend::data_api::wallet","","","","","zcash_client_backend::data_api::wallet::input_selection","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_client_backend::data_api::wallet::input_selection::InputSelectorError","","zcash_client_backend::encoding","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_client_backend::encoding::Bech32DecodeError","","zcash_client_backend::fees","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_client_backend::fees::ChangeError","","","","zcash_client_backend::fees::fixed","","","","","","","","","","","","","","","","","zcash_client_backend::fees::zip317","","","","","","","","","","","","","","","","","zcash_client_backend::keys","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_client_backend::keys::sapling","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_client_backend::keys::testing","zcash_client_backend::proto","","zcash_client_backend::proto::compact_formats","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_client_backend::proto::servicezcash_client_backend::proto::service::compact_tx_streamer_client","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_client_backend::wallet","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_client_backend::welding_rig","","","","","","","","zcash_client_backend::zip321","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_client_backend::zip321::testing","","","","","",""],"d":["A decrypted shielded output.","The output was received on one of the wallet’s external …","The output was decrypted using one of the wallet’s …","An enumeration of the possible relationships a TXO can …","The output was received on one of the wallet’s …","The account that decrypted the note.","Structs for handling supported address types.","","","","","","","Interfaces for wallet data persistence &amp; low-level wallet …","Scans a <code>Transaction</code> for any information that can be …","","","","","","","Encoding and decoding functions for Zcash key and address …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","The index of the output within <code>shielded_outputs</code>.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Helper functions for managing light client key material.","The memo bytes included with the note.","The note within the output.","Generated code for handling light client protobuf structs.","","The address the note was sent to.","","True if this output was recovered using an …","","","","","","","","","Structs representing transaction data scanned from the …","Tools for scanning a compact representation of the Zcash …","Reference implementation of the ZIP-321 standard for …","","An address that funds can be sent to.","","","","A Unified Address.","","","","","","","","","","","","","","","","","","","","","","","","Returns the string encoding of this <code>UnifiedAddress</code> for the …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Constructs a Unified Address from a given set of receivers.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Returns the Orchard receiver within this Unified Address, …","Returns the Sapling receiver within this Unified Address, …","","","Returns the transparent receiver within this Unified …","","","","","","","","","","","","","","","","","","A transaction that was detected during scanning of the …","The type of errors produced by a wallet backend.","","Backend-specific note identifier.","A value pool to which the wallet supports sending …","The subset of information that is relevant to this wallet …","A type that represents the recipient of a transaction …","The Sapling value pool","","A transaction that was constructed and sent by the wallet.","","The transparent value pool","","Backend-specific transaction identifier.","","The type of identifiers used to look up transparent UTXOs.","Read-only operations required for light wallet functions.","This trait encapsulates the write capabilities required to …","","Updates the state of the wallet database by persisting the …","","","Returns the minimum and maximum block heights for stored …","","","","","","","","","","","","","","Tools for blockchain validation &amp; scanning","","","","","","Tells the wallet to track the next available account-level …","","","","","","","","","","","","","","","","","","","","","","Types for wallet error handling.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the account id corresponding to a given …","Returns all nullifiers for notes that the wallet is …","Returns the wallet balance for an account as of the …","Returns the block hash for the block at the given height, …","Returns the note commitment tree at the specified block …","Returns the most recently generated unified address for …","Returns the block hash for the block at the maximum height …","Returns the memo for a note.","Generates and persists the next available diversified …","Returns the nullifiers for notes that the wallet is …","Return all unspent Sapling notes.","Returns the default target height (for the block in which …","Returns a transaction.","Returns a mapping from transparent receiver to …","Returns the set of all transparent receivers associated …","Returns the block height in which the specified …","Returns all unified full viewing keys known to this wallet.","Returns a list of unspent transparent UTXOs that appear in …","Returns the incremental witnesses as of the specified …","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Checks whether the specified extended full viewing key is …","The memo that was attached to the output, if any","The index within the transaction that contains the …","","Adds a transparent UTXO received by the wallet to the data …","The recipient address of the transaction, or the account …","Removes the specified unmined transaction from the …","Rewinds the wallet database to the specified height.","","Returns a list of spendable Sapling notes sufficient to …","Caches a decrypted transaction in the persistent wallet …","Saves information about a transaction that was constructed …","","","","","","","","","","","","","","","","","","","","","","","","","","The value of the newly created output","","","","","","","","This trait provides sequential access to raw blockchain …","","Types for chain scanning error handling.","Scans at most <code>limit</code> new blocks added to the block source …","","Checks that the scanned blocks in the data database, when …","Scan the specified <code>limit</code> number of blocks from the …","The block height field of the proposed new chain tip is …","An error that was produced by the underlying block data …","The underlying cause of a <code>ChainError</code>.","A block that was received violated rules related to chain …","Errors that may occur in chain scanning or validation.","Errors related to chain validation and scanning.","The root of an output’s witness tree in a newly arrived …","The root of an output’s witness tree in a previously …","The hash of the parent block given by a proposed new chain …","An error that was produced by wallet operations in the …","Returns the block height at which this error was …","Constructs an error that indicates a gap in block heights.","","","","","","","Returns the cause of this error.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Constructs an error that indicates a mismatch between a …","Constructs an error that indicates a mismatch between an …","Constructs an error that indicates block hashes failed to …","","","","","","","","","","","","","","","","","","","The index of the shielded output within the transaction …","The root of the witness that failed to match the root of …","The id of the transaction containing the mismatched …","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","No account with the given identifier was found in the …","","Zcash amount computation encountered an overflow or …","An error occurred building a new transaction.","","An error occurred retrieving data from the underlying data …","Errors that can occur as a consequence of wallet …","Unable to create a new spend because the wallet balance is …","No account could be found corresponding to a provided …","It is forbidden to provide a memo when constructing a …","A note being spent does not correspond to either the …","An error in note selection","The wallet must first perform a scan of the blockchain …","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","Adds a transparent UTXO received by the wallet to the data …","","","","","","","","","","Creates a transaction paying the specified address from …","Scans a <code>Transaction</code> for any information that can be …","Types related to the process of selecting inputs to be …","Constructs a transaction that consumes available …","Constructs a transaction that sends funds as specified by …","An intermediate value overflowed or underflowed the valid …","An error was encountered in change selection.","An error occurred accessing the underlying data store.","The type of data source that the input selector expects to …","The type of errors that may be generated in input selection","The type of the fee rule that this input selector uses …","An <code>InputSelector</code> implementation that uses a greedy …","Errors that can occur as a consequence of greedy input …","A strategy for selecting transaction inputs and proposing …","The type of errors that may be produced in input selection.","Insufficient funds were available to satisfy the payment …","A data structure that describes the inputs to be consumed …","An error occurred specific to the provided input selector…","A unified address did not contain a supported receiver.","Returns the change outputs to be added to the transaction …","","","","","","","","","","","","","","","","","","","","","","","","","Returns the fee rule to be used by the transaction builder.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Constructs a new greedy input selector that uses the …","Performs input selection and returns a proposal for the …","","Performs input selection and returns a proposal for …","","Returns the Sapling inputs that have been selected to fund …","","","","Returns the transaction request that describes the …","Returns the transparent inputs that have been selected to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Decodes an <code>ExtendedFullViewingKey</code> from a Bech32-encoded …","Decodes an <code>ExtendedSpendingKey</code> from a Bech32-encoded …","Decodes a <code>PaymentAddress</code> from a Bech32-encoded string.","Decodes a <code>TransparentAddress</code> from a Base58Check-encoded …","","","","","","","","Writes an <code>ExtendedFullViewingKey</code> as a Bech32-encoded …","Writes an <code>ExtendedSpendingKey</code> as a Bech32-encoded string.","Writes a <code>PaymentAddress</code> as a Bech32-encoded string.","Writes a <code>PaymentAddress</code> as a Bech32-encoded string using …","Writes a <code>TransparentAddress</code> as a Base58Check-encoded …","Writes a <code>TransparentAddress</code> as a Base58Check-encoded …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Allow dust amounts to be added to the transaction fee","Explicitly allow the creation of dust change amounts …","Errors that can occur in computing suggested change and/or …","A trait that represents the ability to compute the …","A proposed change amount and output pool.","An enumeration of actions to tak when a transaction would …","Some of the inputs provided to the transaction were …","A policy describing how a <code>ChangeStrategy</code> should treat …","","","Insufficient inputs were provided to change selection to …","Do not allow creation of dust outputs; instead, require …","","An error occurred that was specific to the change …","The amount of change and fees required to make a …","Returns the action to take in the event that a dust change …","","","","","","","","","","","","","","","","","","","","","Computes the totals of inputs, suggested change amounts, …","","","","","","","","","","","","","","","","","Returns a value that will be used to override the dust …","","","","","","","","","","","Returns the fee computed for the transaction, assuming …","Returns the fee rule that this change strategy will …","Change strategies designed for use with a fixed fee.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Constructs a new balance from its constituent parts.","Constructs a new dust output policy.","The change values proposed by the <code>ChangeStrategy</code> that …","","","","","","","Returns the sum of the proposed change outputs and the …","","","","","","","","","","","","","","","","","","","","","","Change strategies designed to implement the ZIP 317 fee …","The total of the inputs provided to change selection","The total amount of input value required to fund the …","The identifiers for Sapling inputs having not current …","The outpoints corresponding to transparent inputs having …","A change strategy that and proposes change as a single …","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Constructs a new <code>SingleOutputChangeStrategy</code> with the …","","","","","A change strategy that and proposes change as a single …","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Constructs a new <code>SingleOutputChangeStrategy</code> with the …","","","","","A type for errors that can occur when decoding keys from …","A version identifier for the encoding of unified spending …","","","","","","","The Orchard era begins at Orchard activation, and will end …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","A Sapling key that provides the capability to view …","","A Sapling extended spending key","Attempt to produce a payment address given the specified …","Attempts to produce a valid payment address for the given …","","","","","","","Returns the internal address corresponding to the smallest …","","","","","","","Attempts to decrypt the given address’s diversifier with …","Returns the address with the lowest valid diversifier …","Returns the payment address corresponding to the smallest …","Returns the payment address corresponding to the smallest …","","","","","","","","","Derives an internal spending key given an external …","Derives an internal full viewing key used for internal …","Returns the payment address corresponding to the specified …","Returns the change address corresponding to the specified …","","","","","","","Search the diversifier space starting at diversifier index …","Finds the next valid payment address starting from the …","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Decodes the extended spending key from its serialized …","Parses a <code>DiversifiableFullViewingKey</code> from its raw byte …","Returns the child key corresponding to the path derived …","","","","Exposes the external <code>FullViewingKey</code> component of this …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Reads and decodes the encoded form of the extended …","","","Derives the ZIP 32 <code>ExtendedSpendingKey</code> for a given coin …","Encodes the extended spending key to the its seralized …","Returns the raw encoding of this …","","","","Derives an incoming viewing key corresponding to this full …","Derives a nullifier-deriving key for the provided scope.","Derives an outgoing viewing key corresponding to this full …","","","","","","","","","","","","","","","","","Writes the encoded form of the extended spending key as …","","","","","CompactBlock is a packaging of ONLY the data from a block …","…","output encodes the <code>cmu</code> field, <code>ephemeralKey</code> field, and a …","CompactSaplingSpend is a Sapling Spend Description as …","CompactTx contains the minimum information for a wallet to …","","","","","","","","","","","","first 52 bytes of ciphertext","[52] The first 52 bytes of the encCiphertext field","","","","","","","","","","","","","","","","Returns the note commitment for this output.","note commitment u-coordinate","[32] The x-coordinate of the note commitment for the …","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the ephemeral public key for this output.","ephemeral public key","[32] An encoding of an ephemeral Pallas public key","","","","","","The transaction fee: present if server can provide. In the …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Returns the <code>BlockHash</code> for this block.","the ID (hash) of this block, same as in block explorers","the ID (hash) of this transaction, same as in block …","Returns the <code>BlockHeader</code> for this block if present.","(hash, prevHash, and time) OR (full header)","Returns the <code>BlockHeight</code> value for this block","the height of this block","Index and hash will allow the receiver to call out to chain","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","nullifier (see the Zcash protocol specification)","[32] The nullifier of the input note","","Returns the <code>BlockHash</code> for this block’s parent.","the ID (hash) of this block’s predecessor","the version of this wire format, for storage","","Unix epoch time when the block was mined","","","","","","","","","","","","","","","","Returns the transaction Id","","","","","","zero or more compact transactions from this block","","","","","","","","","A BlockID message contains identifiers to select a block: …","BlockRange specifies a series of blocks from start to end …","Chainspec is a placeholder to allow specification of a …","Duration is currently used only for testing, so that the …","Empty is for gRPCs that take no arguments, currently only …","","Results are sorted by height, which makes it easy to issue …","","","LightdInfo returns various information about this …","PingResponse is used to indicate concurrency, how many …","RawTransaction contains the complete transaction data. It …","A SendResponse encodes an error code and a string. It is …","TransparentAddressBlockFilter restricts the results to the …","The TreeState is derived from the Zcash z_gettreestate rpc.","A TxFilter contains the information needed to identify a …","t-address","","","","","","block identifier, height or hash","latest block on the best chain","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","either “main” or “test”","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generated client implementations.","protocol identifier, see consensus/upgrades.cpp","exact data returned by Zcash ‘getrawtransaction’","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","less than tip height if zcashd is syncing","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","transaction ID (hash, txid)","block id","","height that the transaction was mined (or -1)","block height","","index within the block","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","zero means unlimited","“main” or “test”","orchard commitment tree state","start, end heights","depends on mainnet or testnet","sapling commitment tree state","","","","true","Unix epoch time when the block was mined","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","example: “v4.1.1-877212414”","example: “/MagicBean:4.1.1/”","","Enable decompressing responses.","","","","","Attempt to create a new client by connecting to a given …","","","","","Returns the argument unchanged.","","","","Return the compact block corresponding to the given block …","Return a list of consecutive compact blocks","Return the height of the tip of the best chain","","Return information about this lightwalletd instance and …","Return a stream of current Mempool transactions. This will …","Return the compact transactions currently in the mempool; …","","","Return the txids corresponding to the given t-address …","Return the requested full (not compact) transaction (as …","GetTreeState returns the note commitment tree state …","","Calls <code>U::from(self)</code>.","","","Testing-only, requires lightwalletd –ping-very-insecure …","Compress requests with the given encoding.","Submit the given transaction to the Zcash network","","","","","","","","Use a custom outgoing viewing key. This might for instance …","Use no outgoing viewing key. Transaction outputs will be …","Describes a policy for which outgoing viewing key should …","Use the outgoing viewing key from the sender’s …","Information about a note that is tracked by the wallet …","A subset of an <code>OutputDescription</code> relevant to wallets and …","A subset of a <code>SpendDescription</code> relevant to wallets and …","","A subset of a <code>Transaction</code> relevant to wallets and light …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The type of nullifier extracted when a note is successfully","","The type of key that is used to decrypt Sapling outputs;","A key that can be used to perform trial decryption and …","The type representing the scope of the scanning key.","Produces the nullifier for the specified note and witness, …","Scans a <code>CompactBlock</code> with a set of <code>ScanningKey</code>s.","Obtain the underlying Sapling incoming viewing key(s) for …","","","","","A single payment being requested.","","","A ZIP321 transaction request.","","Errors that may be produced in decoding of payment …","The amount of the payment that is being requested.","","","","","","","","","","","","","","","","Constructs a new empty transaction request.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Parse the provided URI to a payment request value.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","A human-readable label for this payment within the larger …","A memo that, if included, must be provided with the …","Parse a <code>MemoBytes</code> value from a ZIP 321 compatible …","Converts a <code>MemoBytes</code> value to a ZIP 321 compatible …","A human-readable message to be displayed to the user …","Constructs a new transaction request that obeys the …","A list of other arbitrary key/value pairs associated with …","Returns the slice of payments that make up this request.","The payment address to which the payment should be sent.","","Convert this request to a URI string.","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,0,1,5,0,5,1,5,1,1,1,0,0,5,1,5,1,5,1,0,1,1,0,1,5,1,1,5,5,1,5,1,5,1,0,5,5,0,0,5,1,5,5,1,5,1,5,1,5,1,0,0,0,0,0,17,17,17,0,14,14,16,17,14,16,17,16,17,16,17,16,17,14,16,17,14,16,17,14,14,16,17,16,16,17,16,17,16,16,17,14,16,17,17,17,17,16,16,17,14,16,17,14,16,17,14,16,17,14,16,16,16,17,16,14,16,16,17,17,17,17,17,14,16,17,14,16,17,14,16,17,0,147,29,147,0,0,0,28,29,0,0,28,29,147,29,148,0,0,42,148,27,27,147,27,27,41,42,149,28,29,27,41,42,149,28,29,0,28,29,28,29,27,148,42,27,41,42,149,28,29,27,41,42,149,28,29,27,41,42,149,28,29,28,28,0,42,28,29,27,41,42,149,28,29,28,29,147,147,147,147,147,147,147,147,148,147,147,147,147,147,147,147,147,147,147,27,41,42,149,28,29,27,41,42,149,28,29,27,41,42,149,28,29,147,149,149,42,148,149,148,148,41,147,148,148,0,28,29,27,27,41,42,149,28,29,27,41,42,149,28,29,41,42,27,41,42,149,28,29,42,149,27,41,42,149,28,29,0,0,150,0,0,0,0,150,46,43,0,43,0,0,46,46,46,43,45,45,46,45,43,46,45,43,45,46,45,46,45,46,45,43,46,45,43,46,45,43,46,45,45,43,43,46,45,43,43,46,45,46,45,43,46,45,43,46,45,43,45,45,45,43,43,46,45,45,43,46,45,43,46,45,43,46,45,43,46,45,43,151,151,151,0,52,52,52,52,52,52,52,52,52,52,52,52,52,52,53,53,53,53,53,53,0,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,152,152,0,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,0,0,0,0,0,63,63,56,153,153,153,0,0,0,0,56,0,56,63,66,56,66,72,63,56,66,72,63,63,63,56,66,72,63,56,66,72,63,56,66,72,63,63,63,66,56,63,63,56,56,56,56,66,72,63,63,56,66,72,63,56,66,72,63,56,66,72,63,72,153,72,153,72,66,63,56,63,66,66,56,66,72,63,56,66,72,63,56,66,72,63,56,66,72,63,154,154,0,76,0,73,155,73,73,73,0,76,73,76,73,76,73,73,155,0,0,0,0,73,76,73,76,73,76,155,0,0,0,0,0,0,73,73,73,73,76,76,73,73,76,73,73,76,73,76,73,76,76,73,73,76,73,76,73,76,73,76,73,76,156,156,78,78,0,0,0,0,69,0,70,70,69,78,79,69,0,71,79,67,69,78,71,79,67,69,78,71,79,67,69,78,71,79,67,69,78,71,70,71,79,67,69,78,71,79,67,69,78,71,79,67,69,78,71,71,79,67,69,78,71,79,67,69,78,71,67,70,0,79,67,69,69,78,71,79,67,69,69,78,71,79,67,69,78,71,79,67,69,78,71,79,67,69,78,71,79,67,69,78,71,67,71,67,79,67,69,78,71,69,67,79,67,69,78,71,79,67,69,78,71,79,67,69,78,71,79,79,67,69,78,71,0,157,157,158,158,0,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,0,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,0,0,85,85,85,85,85,85,84,85,85,84,85,84,85,84,85,84,85,84,85,84,85,84,85,84,85,84,85,84,85,84,85,84,85,0,0,84,85,84,85,84,85,84,85,0,0,0,40,86,74,40,86,74,40,86,86,74,40,86,74,40,86,86,74,40,86,74,40,86,74,40,86,74,40,74,40,86,86,74,40,86,74,40,74,40,86,74,40,86,74,40,86,86,86,74,86,74,74,40,86,86,40,74,40,86,74,40,86,74,40,86,74,74,40,86,0,74,86,74,40,74,86,86,86,74,40,86,86,74,40,86,74,40,86,74,40,86,74,40,86,74,40,0,0,0,0,0,0,0,0,102,101,102,103,104,105,101,102,103,104,105,104,105,101,102,103,104,105,101,102,103,104,105,101,102,103,104,105,104,104,105,101,102,103,104,105,101,102,103,104,105,101,102,103,104,105,101,102,103,104,105,101,102,103,104,105,104,104,105,101,102,103,104,105,102,101,102,103,104,105,101,102,103,104,104,105,101,102,103,104,105,101,101,102,101,101,101,101,102,101,102,103,104,105,101,102,103,104,105,101,102,103,104,105,103,103,105,102,101,101,101,102,101,101,102,103,104,105,101,102,103,104,105,101,102,103,104,105,102,101,102,103,104,105,101,101,102,103,104,105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,123,129,130,124,128,114,119,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,119,119,119,119,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,0,119,115,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,113,122,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,116,116,119,122,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,119,112,114,127,112,115,127,129,114,129,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,121,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,128,127,127,120,119,127,129,113,128,119,127,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,126,129,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,125,129,119,119,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,119,119,0,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,62,62,0,62,0,0,0,0,0,159,160,144,159,160,36,62,39,144,159,160,36,62,39,39,39,160,39,144,159,160,36,62,39,144,159,160,36,62,39,36,144,159,160,36,62,39,160,39,144,159,160,36,62,39,39,39,39,144,159,160,144,159,160,36,62,39,144,159,160,36,62,39,144,159,160,36,62,39,160,159,160,160,36,36,36,144,144,39,39,39,36,144,144,160,39,144,159,160,36,62,39,144,159,160,36,62,39,144,39,144,159,160,36,62,39,36,39,144,159,160,36,62,39,160,36,161,161,161,0,161,161,0,161,146,146,146,146,0,146,146,0,146,0,145,146,145,65,146,145,65,146,145,65,146,145,65,146,145,65,65,145,65,146,145,65,146,145,65,65,146,145,65,146,145,65,146,145,65,145,145,0,0,145,65,145,65,145,0,65,146,145,65,146,145,65,146,145,65,146,145,65,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1,1],[[]],0,[[2,3,4],[[6,[5]]]],[7],[7],[7],[7],[7],[7],0,[[1,1],8],[[],8],0,[[1,9],10],[[]],[[]],[[]],0,[[],7],[[],7],[[]],[[]],[[],11],[[],11],0,0,0,0,0,0,[[]],0,[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[]],[[]],0,0,0,0,0,0,0,0,0,[14,15],[[]],[[]],[[]],[[]],[[]],[[]],[16,16],[17,17],[[]],[[]],[18,[[12,[16,19]]]],[18,[[20,[17]]]],[7],[7],[7],[7],[7],[7],[14,21],[7],[7],[7],[16,19],[16,19],[17,19],[[16,16],8],[[17,17],8],[[],8],[[16,9],10],[[17,9],10],[[]],[[]],[16,17],[22,17],[[]],[23,17],[[[20,[24]],[20,[22]],[20,[23]]],[[20,[16]]]],[[]],[[]],[[],7],[[],7],[[],7],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[15,21],14],[16,[[20,[24]]]],[16,[[20,[22]]]],[[]],[[]],[16,[[20,[23]]]],[[],12],[[],12],[25,[[12,[16]]]],[[],12],[[],[[12,[17,26]]]],[[],[[12,[17,26]]]],[[],[[12,[17,26]]]],[25,[[12,[17,26]]]],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[27,[[12,[6]]]],0,0,[[],[[12,[20]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[28,28],[29,29],[[]],[[]],0,[30,12],0,[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[[28,28],8],[[],8],0,0,[[28,9],10],[[29,9],10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],[[12,[6]]]],[[15,2],[[12,[31]]]],[2,[[12,[[20,[32]]]]]],[2,[[12,[[20,[[34,[33]]]]]]]],[15,[[12,[[20,[16]]]]]],[[],[[12,[20]]]],[[],[[12,[35]]]],[15,[[12,[[20,[16]]]]]],[[],[[12,[6]]]],[[15,2],[[12,[[6,[36]]]]]],[37,[[12,[20]]]],[[],[[12,[3]]]],[[15,2],[[12,[[4,[23,31]]]]]],[15,[[12,[[4,[23,14]]]]]],[38,[[12,[[20,[2]]]]]],[[],[[12,[[4,[15,0]]]]]],[[23,2],[[12,[[6,[39]]]]]],[2,[[12,[6]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[]],[[]],[[]],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[15,40],[[12,[8]]]],0,0,0,[39,12],0,[38,12],[2,12],0,[[15,31,2],[[12,[[6,[36]]]]]],[41,12],[42,12],0,[[]],[[]],0,[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],0,0,[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[[20,[37]]],[[12,[43]]]],0,[20,[[12,[[43,[44,44]]]]]],[[2,[20,[37]]],[[12,[43]]]],0,0,0,0,0,0,0,0,0,0,[45,2],[[2,2],45],[[]],[[]],[[]],[[]],[[]],[[]],[45,46],[[[46,[47]]],[[46,[47]]]],[[[45,[47]]],[[45,[47]]]],[[]],[[]],[7],[7],[7],[7],[7],[7],[7],[7],[7],[[[46,[48]],9],10],[[[45,[48]],9],10],[[[45,[49]],9],10],[[[43,[48,48,48]],9],10],[[[43,[49,49,49]],9],10],[[]],[[]],[[]],[45,43],[[]],[[]],[[],7],[[],7],[[],7],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[2,38,7,33],45],[2,45],[2,45],[50],[43,[[20,[51]]]],[[]],[[]],[[],19],[[],19],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[7],[7],[7],[[]],[[],7],[[]],[[],11],[[],12],[[],12],[[],13],[[]],[[52,2,[20,[37]]],[[12,[[43,[44]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[7],[7],[7],[[53,9],10],[[[53,[48,48,48,48]],9],10],[54,53],[[]],[55,53],[56,53],[57,53],[58,53],[[],7],[[]],[[],11],[50],[53,[[20,[51]]]],[[],19],[[],12],[[],12],[[],13],[[]],0,0,0,[[59,27],[[12,[6]]]],[59,[[12,[20]]]],[[]],[[]],[[59,30],12],[7],[7],[7],[[]],0,[59,[[12,[6]]]],[[59,15,2],[[12,[31]]]],[[59,2],[[12,[[20,[32]]]]]],[[59,2],[[12,[[20,[[34,[33]]]]]]]],[[59,15],[[12,[[20,[16]]]]]],[59,[[12,[35]]]],[[59,15],[[12,[[20,[16]]]]]],[59,[[12,[6]]]],[[59,15,2],[[12,[[6,[36]]]]]],[59,[[12,[3]]]],[[59,15,2],[[12,[[4,[23,31]]]]]],[[59,15],[[12,[[4,[23,14]]]]]],[[59,38],[[12,[[20,[2]]]]]],[59,[[12,[[4,[15,0]]]]]],[[59,23,2],[[12,[[6,[39]]]]]],[[59,2],[[12,[6]]]],[[],7],[[]],[[],11],[[59,15,40],[[12,[8]]]],0,[[59,39],12],[[59,38],12],[[59,2],12],[[59,15,31,2],[[12,[[6,[36]]]]]],[[59,41],12],[[59,42],12],[[],12],[[],12],[[],13],[[]],0,[3,12],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[66,67],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[63,[47,47]]],[[63,[47,47]]]],[[]],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[[[63,[68,68]],63],8],[[],8],[66],[[[56,[49,49]],9],10],[[[63,[48,48]],9],10],[[[63,[49,49]],9],10],[69,[[56,[63]]]],[63,[[56,[63]]]],[55,[[56,[63]]]],[[]],[[]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[]],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[70,71],[[72,[70]]]],[[64,2,2],[[12,[[66,[39]],56]]]],[[72,64,2,2],[[12,[[66,[39]],56]]]],[[15,2,2,65],[[12,[[66,[44]],56]]]],[[72,15,2,2,65],[[12,[[66,[44]],56]]]],[66],[[]],[[],19],[[],19],[66,65],[66],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[73,73],[[]],[18,12],[[18,18],[[12,[40,73]]]],[[18,18],[[12,[74,73]]]],[[18,18],[[12,[22,73]]]],[18,[[12,[[20,[23]],75]]]],[7],[7],[7],[7],[7],[7],[[],19],[[18,40],19],[[18,74],19],[[18,22],19],[22,19],[23,19],[23,19],[[73,73],8],[[],8],[[73,9],10],[[73,9],10],[[76,9],10],[[76,9],10],[77,73],[[]],[[]],[[]],[[],7],[[],7],[[]],[[]],[[],11],[[],11],[50],[[]],[[],19],[[],19],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[71,78],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[79,79],[67,67],[[[69,[47,47]]],[[69,[47,47]]]],[78,78],[71,71],[[]],[[]],[[]],[[]],[[]],[[2,71],[[12,[67,[69,[47]]]]]],[[],71],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[71,[[20,[31]]]],[[79,79],8],[[67,67],8],[[[69,[68,68]],69],8],[[78,78],8],[[71,71],8],[[],8],[[],8],[[],8],[[],8],[[],8],[67,31],[[]],0,[[79,9],10],[[67,9],10],[[[69,[49,49]],9],10],[[[69,[48,48]],9],10],[[78,9],10],[[71,9],10],[[]],[[]],[55,[[69,[55]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[]],[[]],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[[6,[79]],31],[[20,[67]]]],[[78,[20,[31]]],71],[67],[[]],[[]],[[]],[[]],[[]],[[],19],[67,31],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],[[],13],[79,31],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[80,2,71],[[12,[67,[69,[47]]]]]],[7],[7],[7],[80],[[]],[[],7],[[]],[[],11],[81,80],[[],12],[[],12],[[],13],[[]],0,[[]],[[]],[[82,2,71],[[12,[67,[69,[47]]]]]],[7],[7],[7],[82],[[]],[[],7],[[]],[[],11],[83,82],[[],12],[[],12],[[],13],[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[7],[7],[7],[7],[7],[7],[[84,84],8],[[85,85],8],[[],8],[[],8],[[84,9],10],[[85,9],10],[[]],[[]],[[],7],[[],7],[[]],[[]],[[],11],[[],11],0,0,[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[]],[[]],0,0,0,[[40,21],[[20,[22]]]],[[86,21],[[20,[22]]]],[[]],[[]],[[]],[[]],[[]],[[]],[86],[74,74],[40,40],[86,86],[[]],[[]],[[]],[[86,22],20],[74],[40],[86],[7],[7],[7],[7],[7],[7],[[74,87],74],[[40,87],[[12,[40]]]],[74,74],[40,40],[[86,88],[[20,[22]]]],[[86,88],[[20,[22]]]],[7],[7],[7],[[74,74],8],[[40,40],8],0,[[40,21],20],[[86,21],20],[[74,9],[[12,[89]]]],[[40,9],[[12,[89]]]],[[86,9],[[12,[89]]]],[[]],[[]],[40,86],[[]],[40,86],[[],[[12,[74,90]]]],[[],[[20,[86]]]],[74,74],[[]],[[]],[[]],[86,91],0,[[],7],[[],7],[[],7],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],74],[[],[[12,[74,92]]]],[[],[[12,[40,92]]]],[[93,94]],[[37,15],74],[74],[86],[74,86],[40,86],[74,40],[[86,95],96],[[86,95],97],[[86,95],98],[[]],[[]],[[]],[86],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[]],[[]],[[]],[74,[[12,[92]]]],[40,[[12,[92]]]],[99,100],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[101],[102],[103],[104],[105],[101,101],[102,102],[103,103],[104,104],[105,105],[[]],[[]],[[]],[[]],[[]],[104,[[12,[106]]]],0,0,[[],101],[[],102],[[],103],[[],104],[[],105],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[101,7],[102,7],[103,7],[104,7],[105,7],[104,[[12,[107]]]],0,0,[[101,101],8],[[102,102],8],[[103,103],8],[[104,104],8],[[105,105],8],0,[[101,9],10],[[102,9],10],[[103,9],10],[[104,9],10],[[105,9],10],[[]],[[]],[[]],[[]],[[[109,[108]]],104],[[]],[[]],[[]],[[]],[[]],[[]],[101,32],0,0,[101,[[20,[110]]]],0,[101,2],0,0,[[],7],[[],7],[[],7],[[],7],[[],7],[[]],[[]],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[103,[[12,[111]]]],0,0,0,[101,32],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[102,38],[[],13],[[],13],[[],13],[[],13],[[],13],0,[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[112],[113],[114],[115],[116],[117],[118],[119],[120],[121],[122],[123],[124],[125],[126],[127],[128],[129],[130],[112,112],[113,113],[114,114],[115,115],[116,116],[117,117],[118,118],[119,119],[120,120],[121,121],[122,122],[123,123],[124,124],[125,125],[126,126],[127,127],[128,128],[129,129],[130,130],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[],112],[[],113],[[],114],[[],115],[[],116],[[],117],[[],118],[[],119],[[],120],[[],121],[[],122],[[],123],[[],124],[[],125],[[],126],[[],127],[[],128],[[],129],[[],130],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[112,7],[113,7],[114,7],[115,7],[116,7],[117,7],[118,7],[119,7],[120,7],[121,7],[122,7],[123,7],[124,7],[125,7],[126,7],[127,7],[128,7],[129,7],[130,7],0,0,[[112,112],8],[[113,113],8],[[114,114],8],[[115,115],8],[[116,116],8],[[117,117],8],[[118,118],8],[[119,119],8],[[120,120],8],[[121,121],8],[[122,122],8],[[123,123],8],[[124,124],8],[[125,125],8],[[126,126],8],[[127,127],8],[[128,128],8],[[129,129],8],[[130,130],8],0,0,0,0,[[112,9],10],[[113,9],10],[[114,9],10],[[115,9],10],[[116,9],10],[[117,9],10],[[118,9],10],[[119,9],10],[[120,9],10],[[121,9],10],[[122,9],10],[[123,9],10],[[124,9],10],[[125,9],10],[[126,9],10],[[127,9],10],[[128,9],10],[[129,9],10],[[130,9],10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],0,0,[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[131,132],131],[[]],[[]],[[[131,[47]]],[[131,[47]]]],[[]],[[],[[12,[[131,[133]],134]]]],[7],[7],[7],[[[131,[48]],9],10],[[]],[[]],[[131,[135,[128]]],[[12,[[136,[130]],137]]]],[[131,[135,[128]]],[[12,[[136,[[138,[129]]]],137]]]],[[131,[135,[112]]],[[12,[[136,[101]],137]]]],[[131,[135,[113]]],[[12,[[136,[[138,[101]]]],137]]]],[[131,[135,[117]]],[[12,[[136,[112]],137]]]],[[131,[135,[118]]],[[12,[[136,[127]],137]]]],[[131,[135,[118]]],[[12,[[136,[119]],137]]]],[[131,[135,[118]]],[[12,[[136,[[138,[115]]]],137]]]],[[131,[135,[126]]],[[12,[[136,[[138,[102]]]],137]]]],[[131,[135,[124]]],[[12,[[136,[125]],137]]]],[[131,139],[[12,[[136,[125]],137]]]],[[131,[135,[120]]],[[12,[[136,[[138,[115]]]],137]]]],[[131,[135,[114]]],[[12,[[136,[115]],137]]]],[[131,[135,[112]]],[[12,[[136,[127]],137]]]],[[],7],[[]],[[],11],[[],131],[[131,[135,[121]]],[[12,[[136,[122]],137]]]],[[131,132],131],[[131,[135,[115]]],[[12,[[136,[116]],137]]]],[[]],[[],12],[[],12],[[],13],[[]],[[],[[131,[140]]]],[141,131],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[39,39],[[]],0,[39,142],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],0,[7],[7],[7],[7],[7],[7],0,[[39,9],10],[[]],[[]],[[]],[[]],[[]],[[]],[[143,142,2],[[20,[39]]]],[[]],[39,2],0,0,0,[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[]],[[]],[[]],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],0,0,0,0,[36],0,0,0,0,[39,143],[39,143],[39,23],0,0,0,0,[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],0,[39,142],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[36,31],[39,31],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[[93,94]],[[101,34],[[6,[144]]]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[7],[7],[7],[7],[7],[7],[7],[7],[7],[[],65],[[145,145],8],[[65,65],8],[[146,9],10],[[145,9],10],[[65,9],10],[[]],[[]],[[]],[18,[[12,[65,146]]]],[[],7],[[],7],[[],7],[[]],[[]],[[]],[[],11],[[],11],[[],11],0,0,[18,[[12,[61,146]]]],[61,19],0,[[[6,[145]]],[[12,[65,146]]]],0,[65],0,0,[65,[[20,[19]]]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[]],[[]],[[]],0,[[],100],[[],100],[[],100],[[],100],[[],100],[[],100]],"p":[[4,"TransferType"],[3,"BlockHeight"],[3,"Transaction"],[3,"HashMap"],[3,"DecryptedOutput"],[3,"Vec"],[15,"usize"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Request"],[4,"Result"],[3,"TypeId"],[3,"AddressMetadata"],[3,"AccountId"],[3,"UnifiedAddress"],[4,"RecipientAddress"],[15,"str"],[3,"String"],[4,"Option"],[3,"DiversifierIndex"],[3,"PaymentAddress"],[4,"TransparentAddress"],[3,"Address"],[3,"Address"],[4,"ConversionError"],[3,"PrunedBlock"],[4,"PoolType"],[4,"Recipient"],[6,"SecretVec"],[3,"Amount"],[3,"BlockHash"],[3,"Node"],[3,"CommitmentTree"],[4,"Memo"],[3,"SpendableNote"],[15,"u32"],[3,"TxId"],[3,"WalletTransparentOutput"],[3,"ExtendedFullViewingKey"],[3,"DecryptedTransaction"],[3,"SentTransaction"],[4,"Error"],[4,"Infallible"],[3,"ChainError"],[4,"Cause"],[8,"Clone"],[8,"Debug"],[8,"Display"],[3,"Demand"],[8,"Error"],[3,"MockBlockSource"],[4,"Error"],[4,"Error"],[4,"BalanceError"],[4,"InputSelectorError"],[4,"Error"],[4,"Error"],[3,"MockWalletDb"],[8,"TxProver"],[3,"MemoBytes"],[4,"OvkPolicy"],[4,"GreedyInputSelectorError"],[3,"NonNegativeAmount"],[3,"TransactionRequest"],[3,"Proposal"],[3,"TransactionBalance"],[8,"PartialEq"],[4,"ChangeError"],[8,"ChangeStrategy"],[3,"DustOutputPolicy"],[3,"GreedyInputSelector"],[4,"Bech32DecodeError"],[3,"ExtendedSpendingKey"],[4,"Error"],[4,"TransparentCodecError"],[4,"Error"],[4,"DustAction"],[4,"ChangeValue"],[3,"SingleOutputChangeStrategy"],[3,"FeeRule"],[3,"SingleOutputChangeStrategy"],[3,"FeeRule"],[4,"Era"],[4,"DecodingError"],[3,"DiversifiableFullViewingKey"],[4,"ChildIndex"],[3,"Diversifier"],[3,"Error"],[4,"DecodingError"],[3,"FullViewingKey"],[3,"Error"],[3,"Note"],[3,"IncrementalWitness"],[4,"Scope"],[3,"SaplingIvk"],[3,"NullifierDerivingKey"],[3,"OutgoingViewingKey"],[4,"Network"],[8,"Strategy"],[3,"CompactBlock"],[3,"CompactTx"],[3,"CompactSaplingSpend"],[3,"CompactSaplingOutput"],[3,"CompactOrchardAction"],[3,"Scalar"],[3,"EphemeralKeyBytes"],[8,"Authorization"],[3,"OutputDescription"],[3,"BlockHeader"],[3,"Nullifier"],[3,"BlockId"],[3,"BlockRange"],[3,"TxFilter"],[3,"RawTransaction"],[3,"SendResponse"],[3,"ChainSpec"],[3,"Empty"],[3,"LightdInfo"],[3,"TransparentAddressBlockFilter"],[3,"Duration"],[3,"PingResponse"],[3,"Address"],[3,"AddressList"],[3,"Balance"],[3,"Exclude"],[3,"TreeState"],[3,"GetAddressUtxosArg"],[3,"GetAddressUtxosReply"],[3,"GetAddressUtxosReplyList"],[3,"CompactTxStreamerClient"],[4,"CompressionEncoding"],[3,"Channel"],[3,"Error"],[8,"IntoRequest"],[3,"Response"],[3,"Status"],[3,"Streaming"],[8,"IntoStreamingRequest"],[3,"InterceptedService"],[3,"Uri"],[3,"TxOut"],[3,"OutPoint"],[3,"WalletTx"],[3,"Payment"],[4,"Zip321Error"],[8,"WalletRead"],[8,"WalletWrite"],[3,"SentTransactionOutput"],[8,"BlockSource"],[13,"InvalidNewWitnessAnchor"],[13,"InsufficientFunds"],[8,"InputSelector"],[13,"InsufficientFunds"],[8,"AddressCodec"],[13,"HrpMismatch"],[13,"InsufficientFunds"],[13,"DustInputs"],[3,"WalletShieldedSpend"],[3,"WalletShieldedOutput"],[8,"ScanningKey"]]},\
"zcash_client_sqlite":{"doc":"<em>An SQLite-based Zcash light client.</em>","t":[3,13,3,13,13,3,4,13,13,13,4,13,13,13,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,3,11,12,12,11,11,11,11,11,11,12,0,11,11,11,0,12,12,11,11,11,11,5,5,0,5,0,17,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,5,5,5,5,5,5,5,5,5,5,5,5,10,0,5,5,10,5,5,10,10,10,5,5,5,5,10,0,5,13,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,5,5],"n":["BlockDb","CorruptedData","DataConnStmtCache","Db","Fs","FsBlockDb","FsBlockDbError","InvalidBlockPath","InvalidBlockstoreRoot","MissingBlockPath","NoteId","Protobuf","ReceivedNoteId","SentNoteId","UtxoId","WalletDb","advance_by_block","block_height_extrema","block_height_extrema","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","clone","clone","clone_into","clone_into","cmp","create_account","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","eq","eq","equivalent","equivalent","error","fmt","fmt","fmt","fmt","fmt","for_path","for_path","for_path","from","from","from","from","from","from","from","from","from","from","from_ref","from_ref","get_account_for_ufvk","get_account_for_ufvk","get_all_nullifiers","get_all_nullifiers","get_balance_at","get_balance_at","get_block_hash","get_block_hash","get_commitment_tree","get_commitment_tree","get_current_address","get_current_address","get_max_cached_height","get_memo","get_memo","get_next_available_address","get_nullifiers","get_nullifiers","get_spendable_sapling_notes","get_spendable_sapling_notes","get_transaction","get_transaction","get_transparent_balances","get_transparent_balances","get_transparent_receivers","get_transparent_receivers","get_tx_height","get_tx_height","get_unified_full_viewing_keys","get_unified_full_viewing_keys","get_unspent_transparent_outputs","get_unspent_transparent_outputs","get_update_ops","get_witnesses","get_witnesses","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","into_request","into_request","is_valid_account_extfvk","is_valid_account_extfvk","partial_cmp","put_received_transparent_utxo","remove_unmined_tx","rewind_to_height","select_spendable_sapling_notes","select_spendable_sapling_notes","stmt_insert_block","stmt_update_expired","store_decrypted_tx","store_sent_tx","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wallet","with_blocks","with_blocks","write_block_metadata","BlockMeta","block_file_path","block_hash","block_time","borrow","borrow_mut","deref","deref_mut","drop","from","height","init","init","into","into_request","migrations","orchard_actions_count","sapling_outputs_count","try_from","try_into","type_id","vzip","init_blockmeta_db","init_cache_database","blockmeta","all_migrations","init","MIGRATION_ID","Migration","borrow","borrow_mut","dependencies","deref","deref_mut","description","down","drop","from","id","init","into","into_request","try_from","try_into","type_id","up","vzip","AccountIdDiscontinuity","AccountIdOutOfRange","AddressNotRecognized","Bech32DecodeError","CorruptedData","DbError","DiversifierIndexOutOfRange","HdwalletError","InvalidMemo","InvalidNote","InvalidNoteId","Io","KeyDerivationError","Protobuf","RequestedRewindInvalid","SqliteClientError","TableNotEmpty","TransactionIsMined","TransparentAddress","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from","from","from","from","from","from","from","init","into","into_request","provide","source","to_string","try_from","try_into","type_id","vzip","ShieldedOutput","account","block_height_extrema","get_address","get_balance","get_balance_at","get_block_hash","get_commitment_tree","get_nullifiers","get_received_memo","get_rewind_height","get_sent_memo","get_tx_height","get_witnesses","index","init","insert_block","insert_witness","is_change","is_valid_account_extfvk","mark_sapling_note_spent","memo","note","nullifier","prune_witnesses","put_received_note","put_tx_data","put_tx_meta","to","transact","update_expired_notes","BalanceError","CorruptedData","DbError","SeedRequired","WalletMigrationError","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from","from","init","init_accounts_table","init_blocks_table","init_wallet_db","into","into_request","provide","source","to_string","try_from","try_into","type_id","vzip","get_spendable_sapling_notes","select_spendable_sapling_notes"],"q":["zcash_client_sqlitezcash_client_sqlite::chain","","","","","","","","","","","","","","","","","","","","","","zcash_client_sqlite::chain::init","","zcash_client_sqlite::chain::migrations","zcash_client_sqlite::chain::migrations::blockmeta","","zcash_client_sqlite::chain::migrations::blockmeta::init","","","","","","","","","","","","","","","","","","","","zcash_client_sqlite::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_client_sqlite::wallet","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_client_sqlite::wallet::init","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_client_sqlite::wallet::transact",""],"d":["A handle for the SQLite block source.","","The primary type used to implement <code>WalletWrite</code> for the …","","","A block source that reads block data from disk and block …","Errors that can be generated by the …","","","","A newtype wrapper for sqlite primary key values for the …","","","","A newtype wrapper for sqlite primary key values for the …","A wrapper for the SQLite connection to the wallet database.","","","","","","","","","","","","","","","","","","Functions for enforcing chain validity and handling chain …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Error types for problems that may arise when reading or …","","","","","","Construct a connection to the wallet database stored at …","Opens a connection to the wallet database stored at the …","Creates a filesystem-backed block store at the given path.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","Returns the maximum height of blocks known to the block …","","","","","","","","","","","","","","","","","","","","Given a wallet database connection, obtain a handle for …","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Inserts information about a scanned block into the …","Marks notes that have not been mined in transactions as …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Functions for querying information in the wdb database.","","","Adds a set of block metadata entries to the metadata …","Data structure representing a row in the block metadata …","","","","","","","","","Returns the argument unchanged.","","Functions for initializing the various databases.","","Calls <code>U::from(self)</code>.","","","","","","","","","Sets up the internal structure of the metadata cache …","Sets up the internal structure of the cache database.","","","","The migration that added the <code>compactblocks_meta</code> table.","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","A caller attempted to initialize the accounts table with a …","A caller attempted to construct a new account with an …","The address associated with a record being inserted was …","A Bech32-encoded key or address decoding error","Decoding of a stored value from its serialized form has …","Wrapper for rusqlite errors.","The space of allocatable diversifier indices has been …","An error produced in legacy transparent address derivation","A received memo cannot be interpreted as a UTF-8 string.","The rcm value for a note cannot be decoded to a valid …","The note id associated with a witness being stored …","Wrapper for errors from the IO subsystem","An error occurred deriving a spending key from a seed and …","An error occurred decoding a protobuf message.","A requested rewind would violate invariants of the storage …","The primary error type for the SQLite wallet backend.","Illegal attempt to reinitialize an already-initialized …","A transaction that has already been mined was requested …","An error encountered in decoding a transparent address …","","","","","","","","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","This trait provides a generalization over shielded output …","","Returns the minimum and maximum heights for blocks stored …","Returns the address for the account.","Returns the balance for the account, including all mined …","Returns the verified balance for the account at the …","Returns the block hash for the block at the specified …","Returns the commitment tree for the block at the specified …","Retrieve the nullifiers for notes that the wallet is …","Returns the memo for a received note.","Gets the height to which the database must be rewound if …","Returns the memo for a sent note.","Returns the block height at which the specified …","Returns the incremental witnesses for the block at the …","","Functions for initializing the various databases.","Inserts information about a scanned block into the …","Records the incremental witness for the specified note, as …","","Checks whether the specified <code>ExtendedFullViewingKey</code> is …","Marks a given nullifier as having been revealed in the …","","","","Removes old incremental witnesses up to the given block …","Records the specified shielded output as having been …","Inserts full transaction data into the database.","Inserts information about a mined transaction that was …","","Functions for creating transactions.","Marks notes that have not been mined in transactions as …","Wrapper for amount balance violations","Decoding of an existing value from its serialized form has …","Wrapper for rusqlite errors.","The seed is required for the migration.","","","","","","","","","","Returns the argument unchanged.","","","Initialises the data database with the given set of …","Initialises the data database with the given block.","Sets up the internal structure of the data database.","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,16,0,16,16,0,0,16,16,16,0,16,8,8,0,0,2,2,7,2,7,20,21,8,9,16,2,7,20,21,8,9,16,0,8,9,8,9,8,2,2,7,20,21,8,9,16,2,7,20,21,8,9,16,2,7,20,21,8,9,16,8,9,8,9,0,8,8,9,16,16,7,20,21,2,7,20,21,8,9,16,16,16,16,8,9,2,7,2,7,2,7,2,7,2,7,2,7,21,2,7,2,2,7,2,7,2,7,2,7,2,7,2,7,2,7,2,7,7,2,7,2,7,20,21,8,9,16,2,7,20,21,8,9,16,2,7,20,21,8,9,16,2,7,8,2,2,2,2,7,2,2,2,2,8,9,8,16,2,7,20,21,8,9,16,2,7,20,21,8,9,16,2,7,20,21,8,9,16,2,7,20,21,8,9,16,0,20,21,21,0,50,50,50,50,50,50,50,50,50,50,0,50,50,50,0,50,50,50,50,50,50,0,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,76,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0,0,76,0,0,76,76,76,0,0,0,0,76,0,0,73,73,73,73,0,73,73,73,73,73,73,73,73,73,73,73,0,0,0,73,73,73,73,73,73,73,73,73,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]],3],[[5,[4]]]],[[[2,[1]]],[[5,[6]]]],[[[7,[1]]],[[5,[6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[8,8],[9,9],[[]],[[]],[[8,8],10],[[[2,[1]],11],5],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[12],[[8,8],13],[[9,9],13],[[],13],[[],13],0,[[8,14],15],[[8,14],15],[[9,14],15],[[16,14],15],[[16,14],15],[[[18,[17]],1],[[5,[[7,[1]],19]]]],[[[18,[17]]],[[5,[20,19]]]],[[[18,[17]]],[[5,[21,16]]]],[[]],[[]],[[]],[[]],[[]],[[]],[22,16],[19,16],[23,16],[[]],[[]],[[]],[[[2,[1]],24],[[5,[[6,[25]]]]]],[[[7,[1]],24],[[5,[[6,[25]]]]]],[[[2,[1]]],[[5,[4]]]],[[[7,[1]]],[[5,[4]]]],[[[2,[1]],25,26],[[5,[27]]]],[[[7,[1]],25,26],[[5,[27]]]],[[[2,[1]],26],[[5,[[6,[28]]]]]],[[[7,[1]],26],[[5,[[6,[28]]]]]],[[[2,[1]],26],[[5,[[6,[[30,[29]]]]]]]],[[[7,[1]],26],[[5,[[6,[[30,[29]]]]]]]],[[[2,[1]],25],[[5,[[6,[31]]]]]],[[[7,[1]],25],[[5,[[6,[31]]]]]],[21,[[5,[[6,[26]],16]]]],[[[2,[1]]],[[5,[32]]]],[[[7,[1]]],[[5,[32]]]],[[[2,[1]],25],[[5,[[6,[31]]]]]],[[[2,[1]]],[[5,[4]]]],[[[7,[1]]],[[5,[4]]]],[[[2,[1]],25,26],[[5,[[4,[33]]]]]],[[[7,[1]],25,26],[[5,[[4,[33]]]]]],[[[2,[1]],34],[[5,[35]]]],[[[7,[1]],34],[[5,[35]]]],[[[2,[1]],25,26],[[5,[[37,[36,27]]]]]],[[[7,[1]],25,26],[[5,[[37,[36,27]]]]]],[[[2,[1]],25],[[5,[[37,[36,38]]]]]],[[[7,[1]],25],[[5,[[37,[36,38]]]]]],[[[2,[1]],39],[[5,[[6,[26]]]]]],[[[7,[1]],39],[[5,[[6,[26]]]]]],[[[2,[1]]],[[5,[[37,[25,24]]]]]],[[[7,[1]]],[[5,[[37,[25,24]]]]]],[[[2,[1]],36,26],[[5,[[4,[40]]]]]],[[[7,[1]],36,26],[[5,[[4,[40]]]]]],[[[7,[1]]],[[5,[[2,[1]],41]]]],[[[2,[1]],26],[[5,[4]]]],[[[7,[1]],26],[[5,[4]]]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[[2,[1]],25,43],[[5,[13]]]],[[[7,[1]],25,43],[[5,[13]]]],[[8,8],[[6,[10]]]],[[[2,[1]],40],5],[[[2,[1]],39],5],[[[2,[1]],26],5],[[[2,[1]],25,27,26],[[5,[[4,[33]]]]]],[[[7,[1]],25,27,26],[[5,[[4,[33]]]]]],[[2,26,28,44,30],[[5,[41]]]],[[2,26],[[5,[41]]]],[[[2,[1]],45],5],[[[2,[1]],46],5],[[]],[[]],[[],47],[[],47],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[20,26,[6,[44]]],[[5,[49]]]],[[21,26,[6,[44]]],[[5,[49]]]],[21,[[5,[16]]]],0,[50,51],0,0,[[]],[[]],[12],[12],[12],[[]],0,0,[[],12],[[]],[[],42],0,0,0,[[],5],[[],5],[[],48],[[]],[21,[[5,[[52,[19]]]]]],[20,[[5,[19]]]],0,[[],[[4,[[54,[53]]]]]],0,0,0,[[]],[[]],[55,[[57,[56]]]],[12],[12],[55,58],[[55,59],5],[12],[[]],[55,56],[[],12],[[]],[[],42],[[],5],[[],5],[[],48],[[55,59],5],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[12],[12],[12],[[41,14],15],[[41,14],15],[19,41],[[]],[23,41],[60,41],[22,41],[61,41],[62,41],[63,41],[[],12],[[]],[[],42],[64],[41,[[6,[65]]]],[[],47],[[],5],[[],5],[[],48],[[]],0,[[],25],[7,[[5,[6,19]]]],[[7,25],[[5,[[6,[66]],41]]]],[[7,25],[[5,[27,41]]]],[[7,25,26],[[5,[27,41]]]],[[7,26],[[5,[[6,[28]],19]]]],[[7,26],[[5,[[6,[[30,[29]]]],41]]]],[7,[[5,[4,41]]]],[[7,34],[[5,[32,41]]]],[7,[[5,[[6,[26]],41]]]],[[7,34],[[5,[32,41]]]],[[7,39],[[5,[[6,[26]],19]]]],[[7,26],[[5,[4,41]]]],[[],12],0,[[2,26,28,44,30],[[5,[41]]]],[[2,34,67,26],[[5,[41]]]],[[],[[6,[13]]]],[[7,25,43],[[5,[13,41]]]],[[2,34,68],[[5,[41]]]],[[],[[6,[69]]]],[[],70],[[],[[6,[68]]]],[[2,26],[[5,[41]]]],[[2,34],[[5,[8,41]]]],[[2,35,[6,[27]],[6,[71]]],[[5,[34,41]]]],[[2,72,26],[[5,[34,41]]]],[[],66],0,[[2,26],[[5,[41]]]],0,0,0,0,0,[[]],[[]],[12],[12],[12],[[73,14],15],[[73,14],15],[74,73],[[]],[19,73],[[],12],[[7,37],[[5,[41]]]],[[7,26,28,44],[[5,[41]]]],[[7,[6,[[11,[75]]]]],[[5,[[52,[73]]]]]],[[]],[[],42],[64],[73,[[6,[65]]]],[[],47],[[],5],[[],5],[[],48],[[]],[[7,25,26],[[5,[[4,[[33,[8]]]],41]]]],[[7,25,27,26],[[5,[[4,[[33,[8]]]],41]]]]],"p":[[8,"Parameters"],[3,"DataConnStmtCache"],[3,"PrunedBlock"],[3,"Vec"],[4,"Result"],[4,"Option"],[3,"WalletDb"],[4,"NoteId"],[3,"UtxoId"],[4,"Ordering"],[6,"SecretVec"],[15,"usize"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"FsBlockDbError"],[3,"Path"],[8,"AsRef"],[4,"Error"],[3,"BlockDb"],[3,"FsBlockDb"],[3,"DecodeError"],[3,"Error"],[3,"UnifiedFullViewingKey"],[3,"AccountId"],[3,"BlockHeight"],[3,"Amount"],[3,"BlockHash"],[3,"Node"],[3,"CommitmentTree"],[3,"UnifiedAddress"],[4,"Memo"],[3,"SpendableNote"],[15,"i64"],[3,"Transaction"],[4,"TransparentAddress"],[3,"HashMap"],[3,"AddressMetadata"],[3,"TxId"],[3,"WalletTransparentOutput"],[4,"SqliteClientError"],[3,"Request"],[3,"ExtendedFullViewingKey"],[15,"u32"],[3,"DecryptedTransaction"],[3,"SentTransaction"],[3,"String"],[3,"TypeId"],[4,"Error"],[3,"BlockMeta"],[3,"PathBuf"],[4,"MigratorError"],[8,"RusqliteMigration"],[3,"Box"],[3,"Migration"],[3,"Uuid"],[3,"HashSet"],[15,"str"],[3,"Transaction"],[4,"Bech32DecodeError"],[4,"Error"],[4,"TransparentCodecError"],[4,"Error"],[3,"Demand"],[8,"Error"],[3,"PaymentAddress"],[3,"IncrementalWitness"],[3,"Nullifier"],[3,"MemoBytes"],[3,"Note"],[3,"OffsetDateTime"],[3,"WalletTx"],[4,"WalletMigrationError"],[4,"BalanceError"],[15,"u8"],[8,"ShieldedOutput"]]},\
"zcash_encoding":{"doc":"<em>Zcash binary encodings.</em>","t":[3,3,17,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Array","CompactSize","MAX_COMPACT_SIZE","Optional","Vector","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","into","into","into","into","read","read","read","read","read_collected","read_collected","read_collected_mut","read_collected_mut","read_t","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","write","write","write","write","write_nonempty","write_sized"],"q":["zcash_encoding","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Namespace for functions that perform encoding of array …","Namespace for functions for compact encoding of integers.","The maximum allowed value representable as a <code>[CompactSize]</code>","Namespace for functions that perform encoding of <code>Option</code> …","Namespace for functions that perform encoding of vectors.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Reads an integer encoded in compact form.","Reads a vector, assuming the encoding written by …","Reads <code>count</code> elements from a stream into a vector, assuming …","Reads an optional value, assuming the encoding written by …","Reads a CompactSize-prefixed series of elements into a …","Reads <code>count</code> elements into a collection, assuming the …","Reads a CompactSize-prefixed series of elements into a …","Reads <code>count</code> elements into a collection, assuming the …","Reads an integer encoded in contact form and performs …","","","","","","","","","","","","","Writes the provided <code>usize</code> value to the provided Writer in …","Writes a slice of values by writing <code>CompactSize</code>-encoded …","Writes an iterator full of values to a stream by …","Writes an optional value to a stream by writing a flag …","Writes a NonEmpty container of values to the stream using …","Writes an iterator of values by writing <code>CompactSize</code>…"],"i":[0,0,0,0,0,16,17,18,19,16,17,18,19,16,17,18,19,16,17,18,19,16,17,18,19,17,18,17,18,16,16,17,18,19,16,17,18,19,16,17,18,19,16,17,18,19,17,17],"f":[0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,[[3,[2]]]],[1,[[3,[4]]]],[[1,5],[[3,[4]]]],[1,[[3,[6]]]],[1,[[3,[7]]]],[[1,5],[[3,[7]]]],[1,[[3,[7]]]],[[1,5],[[3,[7]]]],[1,[[3,[[8,[2]]]]]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[],10],[[11,5],3],[11,3],[[11,12],3],[[11,6],3],[[11,13],3],[[11,[0,[14,15]]],3]],"p":[[8,"Read"],[15,"u64"],[6,"Result"],[3,"Vec"],[15,"usize"],[4,"Option"],[8,"FromIterator"],[8,"TryFrom"],[4,"Result"],[3,"TypeId"],[8,"Write"],[8,"IntoIterator"],[3,"NonEmpty"],[8,"Iterator"],[8,"ExactSizeIterator"],[3,"CompactSize"],[3,"Vector"],[3,"Array"],[3,"Optional"]]},\
"zcash_extensions":{"doc":"","t":[0,0,0,3,13,17,8,16,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,10,11,11,11,0,13,13,13,13,8,4,3,4,13,13,13,13,13,13,13,13,13,13,13,4,13,3,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12],"n":["consensus","transparent","transparent","Context","Demo","EXTENSION_DEMO","Epoch","Error","ExtensionId","InvalidExtId","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","epoch_for_branch","fmt","from","from","from","height","init","init","init","into","into","into","is_tze_only","new","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","tx","tx_tze_outputs","type_id","type_id","type_id","verify","vzip","vzip","vzip","demo","BaseBuilderError","Close","Close","CloseMismatch","Context","DemoBuildError","DemoBuilder","Error","ExpectedClose","ExpectedClose","ExpectedOpen","HashMismatch","IllegalPayloadLength","InvalidOutputQty","ModeInvalid","ModeMismatch","NonTzeTxn","Open","Open","Precondition","PrevoutParseFailure","Program","TransferMismatch","Witness","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","close","close","demo_close","demo_open","demo_transfer_to_close","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","eq","eq","eq","extension_id","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_payload","from_payload","init","init","init","init","init","init","into","into","into","into","into","into","is_tze_only","open","open","to_payload","to_payload","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","tx_tze_outputs","txn_builder","type_id","type_id","type_id","type_id","type_id","type_id","verify_inner","vzip","vzip","vzip","vzip","vzip","vzip","actual","actual","expected","expected"],"q":["zcash_extensions","","zcash_extensions::consensus","zcash_extensions::consensus::transparent","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_extensions::transparent","zcash_extensions::transparent::demo","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_extensions::transparent::demo::DemoBuildError","","",""],"d":["","Zcash transparent extensions.","Consensus logic for Transparent Zcash Extensions.","The complete set of context data that is available to any …","","Wire value for the demo extension identifier.","Implementations of this trait provide complete extension …","","The set of programs that have assigned type IDs within the …","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","For a specific epoch, if the extension ID and mode of the …","","","","Demo implementation of TZE consensus rules.","Wrapper for errors returned from the underlying <code>Builder</code>","","","","This trait defines the context information that the demo …","Errors that can occur in construction of transactions …","Wrapper for <code>zcash_primitives::transaction::builder::Builder</code>…","Errors that may be produced during parsing and …","Verification error indicating that an <code>Open</code>-mode …","","","Verification error indicating that the witness being …","Parse error indicating that the payload of the condition …","Verification error indicating that an unexpected number of …","Verification error indicating that the specified mode was …","Verification error indicating that the mode requested by …","Verification error indicating that the transaction …","","","The precondition type for the demo extension.","","Marker type for the demo extension.","","The witness type for the demo extension.","","","","","","","","","","","","","Convenience constructor for closing precondition values.","","Add a channel-closing witness to the transaction under …","Add a channel-opening precondition to the outputs of the …","Add a witness to a previous channel-opening precondition …","","","","","","","","","","","","","","","","","","","","","","","","The assigned identifier for this extension. This is …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Predicate used to determine whether this transaction has …","Convenience constructor for opening precondition values.","","","","","","","","","","","","","","","","","","","List of all TZE outputs in the transaction being validate …","The wrapped transaction builder.","","","","","","","Runs the program against the given precondition, witness, …","","","","","","","","","",""],"i":[0,0,0,0,1,0,0,4,0,0,29,9,1,29,9,1,1,1,29,9,1,29,9,1,29,9,1,0,1,29,9,1,9,29,9,1,29,9,1,9,9,1,29,9,1,1,29,9,1,9,9,29,9,1,4,29,9,1,0,23,19,20,23,0,0,0,0,25,23,23,25,25,25,25,25,25,19,20,0,23,0,23,0,28,22,19,25,20,23,28,22,19,25,20,23,19,20,22,22,22,28,22,22,19,25,20,23,28,22,22,19,25,20,23,28,22,19,25,20,23,19,25,20,22,19,25,25,20,23,28,22,19,25,20,23,19,20,28,22,19,25,20,23,28,22,19,25,20,23,30,19,20,19,20,25,28,22,19,19,25,20,20,23,28,22,19,25,20,23,30,22,28,22,19,25,20,23,28,28,22,19,25,20,23,31,32,31,32],"f":[0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[[]],[2],[2],[2],[2],[2],[2],[2],[2],[2],[3,[[6,[[5,[4]]]]]],[[1,7],8],[[]],[[]],[[]],0,[[],2],[[],2],[[],2],[[]],[[]],[[]],[9,10],[[11,12],9],[[]],[[],13],[[],13],[14,[[13,[1]]]],[[],13],[[],13],[[],13],[[],13],0,[9],[[],15],[[],15],[[],15],[[16,17,9],[[13,[18]]]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],19],[[],20],[[[22,[21]]],[[13,[23]]]],[[[22,[21]],24],[[13,[23]]]],[[[22,[21]],24],[[13,[23]]]],[2],[2],[22],[2],[2],[2],[2],[2],[22],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[[19,19],10],[[25,25],10],[[20,20],10],0,[[19,7],8],[[25,7],8],[[25,7],8],[[20,7],8],[[[23,[26]],7],8],[[]],[[]],[[]],[[]],[[]],[[]],[14,[[13,[19]]]],[14,[[13,[20]]]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],19],[[],20],[19],[20],[[],27],[[],13],[[],13],[[],13],[[],[[13,[19]]]],[[],13],[[],13],[[],[[13,[20]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[]],0,[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[28,19,20],[[13,[25]]]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0],"p":[[4,"ExtensionId"],[15,"usize"],[4,"BranchId"],[8,"Epoch"],[3,"Box"],[4,"Option"],[3,"Formatter"],[6,"Result"],[3,"Context"],[15,"bool"],[3,"BlockHeight"],[3,"Transaction"],[4,"Result"],[15,"u32"],[3,"TypeId"],[3,"Precondition"],[3,"Witness"],[4,"Error"],[4,"Precondition"],[4,"Witness"],[8,"ExtensionTxBuilder"],[3,"DemoBuilder"],[4,"DemoBuildError"],[3,"Amount"],[4,"Error"],[8,"Debug"],[3,"String"],[3,"Program"],[3,"InvalidExtId"],[8,"Context"],[13,"TransferMismatch"],[13,"CloseMismatch"]]},\
"zcash_history":{"doc":"Chain history library for Zcash","t":[3,4,4,4,13,13,13,13,17,17,13,3,16,13,3,4,4,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,12,11,10,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,12,10,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11],"n":["Entry","EntryKind","EntryLink","Error","ExpectedInMemory","ExpectedNode","Generated","Leaf","MAX_ENTRY_SIZE","MAX_NODE_DATA_SIZE","Node","NodeData","NodeData","Stored","Tree","V1","V2","Version","append_leaf","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","combine","combine","combine","combine_inner","combine_inner","combine_inner","complete","consensus_branch_id","consensus_branch_id","consensus_branch_id","consensus_branch_id","default","end_height","end_height","end_height","end_height","end_sapling_root","end_target","end_time","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_bytes","from_bytes","from_bytes","from_bytes","hash","hash","hash","into","into","into","into","into","into","into","into","is_empty","leaf","leaf_count","left","len","link_node_expected","new","new","new_leaf","node_expected","read","read","read","read","read","resolve_link","right","root","root_node","sapling_tx","start_height","start_height","start_height","start_height","start_sapling_root","start_target","start_time","subtree_commitment","subtree_total_work","to_bytes","to_bytes","to_bytes","to_owned","to_owned","to_string","to_string","to_string","truncate_leaf","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write","write","write","write","write"],"q":["zcash_history","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["MMR Entry.","MMR Node. It is leaf when <code>left</code>, <code>right</code> are <code>None</code> and node …","Reference to to the tree node.","Crate-level error type","Entry expected to be presented in the tree view while it …","Entry expected to be a node (specifying for which link …","Reference to the generated leaf/node.","Leaf entry.","Max serialized length of entry data.","Maximum serialized size of the node metadata.","Node entry with children links.","V1 node metadata.","The node data for this tree version.","Reference to the stored (in the array representation) …","Represents partially loaded tree.","Version 1 of the Zcash chain history tree.","Version 2 of the Zcash chain history tree.","A version of the chain history tree.","Append one leaf to the tree.","","","","","","","","","","","","","","","","","","","","","Combines two nodes’ metadata.","Combines two nodes’ metadata.","Combine two nodes metadata.","Combines two nodes metadata.","","","Returns if is this node complete (has total of 2^N leaves)","Returns the consensus branch ID for the given node data.","","","Consensus branch id, should be provided by deserializing …","","Returns the end height for the given node data.","","","End height","End sapling tree root.","End target.","End time.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from byte representation.","Convert from byte representation.","Convert from byte representation.","Convert from byte representation.","Hash node metadata","Hash node metadata","Hash node metadata","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If this tree is empty.","Is this node a leaf.","Number of leaves under this node.","Left child","Length of array representation of the tree.","Entry expected to be a node (specifying for which link …","New view into the the tree array representation","New entry of type node.","Creates a new leaf.","Some entry is expected to be node","Parses node data from the given reader.","","","Read from byte representation.","Read from the byte representation.","Resolve link originated from this tree","Right child.","Link to the root node","Reference to the root node.","Number of Sapling transactions.","Returns the start height for the given node data.","","","Start height.","Start sapling tree root.","Start target.","Start time.","Subtree commitment - either block hash for leaves or …","Part of tree total work.","Converts to byte representation.","Converts to byte representation.","Convert to byte representation.","","","","","","Truncate one leaf from the end of the tree.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Writes the byte representation of the given node data to …","","","Write to byte representation.","Write to the byte representation."],"i":[0,0,0,0,5,5,3,15,0,0,15,0,1,3,0,0,0,0,2,2,21,22,8,7,5,3,15,2,21,22,8,7,5,3,15,7,3,7,3,1,1,7,1,21,22,8,1,21,22,7,7,1,21,22,7,7,7,7,8,8,7,5,5,3,3,15,2,21,22,8,7,5,3,15,1,1,8,7,1,1,7,2,21,22,8,7,5,3,15,2,8,8,8,2,5,2,8,8,5,1,21,22,8,7,2,8,2,2,7,1,21,22,7,7,7,7,7,7,1,1,7,7,3,8,5,3,2,2,21,22,8,7,5,3,15,2,21,22,8,7,5,3,15,2,21,22,8,7,5,3,15,2,21,22,8,7,5,3,15,1,21,22,8,7],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]]],[[6,[[4,[3]],5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7,7],[3,3],[[]],[[]],[[]],[[]],[[7,7],7],[[]],[[]],[[]],[[[8,[1]]],9],[[],10],[[],10],[[],10],0,[[],7],[[],11],[[],11],[[],11],0,0,0,0,[[[8,[[0,[12,1]]]],13],14],[[[8,[1]],13],14],[[7,13],14],[[5,13],14],[[5,13],14],[[3,13],14],[[3,13],14],[[15,13],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[10,16],17],[[10,16],17],[[10,16],[[17,[[8,[1]]]]]],[[10,16],[[17,[7]]]],[[]],[[]],[7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]]],9],[[[8,[1]]],9],[[[8,[1]]],11],[[[8,[1]]],[[6,[3,5]]]],[[[2,[1]]],10],[3,5],[[10,4,4],[[2,[1]]]],[[3,3],[[8,[1]]]],[[],[[8,[1]]]],[[],5],[10,17],[10,17],[10,17],[10,[[17,[[8,[1]]]]]],[10,[[17,[7]]]],[[[2,[1]],3],[[6,[[0,[1]],5]]]],[[[8,[1]]],[[6,[3,5]]]],[[[2,[1]]],3],[[[2,[1]]],[[6,[[0,[1]],5]]]],0,[[],11],[[],11],[[],11],0,0,0,0,0,0,[[],[[4,[18]]]],[[],[[4,[18]]]],[7,[[4,[18]]]],[[]],[[]],[[],19],[[],19],[[],19],[[[2,[1]]],[[6,[10,5]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[[8,[1]]],17],[7,17]],"p":[[8,"Version"],[3,"Tree"],[4,"EntryLink"],[3,"Vec"],[4,"Error"],[4,"Result"],[3,"NodeData"],[3,"Entry"],[15,"bool"],[15,"u32"],[15,"u64"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[4,"EntryKind"],[8,"AsRef"],[6,"Result"],[15,"u8"],[3,"String"],[3,"TypeId"],[4,"V1"],[4,"V2"]]},\
"zcash_note_encryption":{"doc":"Note encryption for Zcash transactions.","t":[8,17,16,8,17,3,16,16,16,16,16,16,17,16,3,3,17,17,3,3,16,16,16,16,8,16,16,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,10,10,10,11,11,10,10,11,10,11,10,10,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,10,10,10,11,11,10,10,10,10,10,11,5,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,5,5],"n":["BatchDomain","COMPACT_NOTE_SIZE","DiversifiedTransmissionKey","Domain","ENC_CIPHERTEXT_SIZE","EphemeralKeyBytes","EphemeralPublicKey","EphemeralSecretKey","ExtractedCommitment","ExtractedCommitmentBytes","IncomingViewingKey","Memo","NOTE_PLAINTEXT_SIZE","Note","NoteEncryption","NotePlaintextBytes","OUT_CIPHERTEXT_SIZE","OUT_PLAINTEXT_SIZE","OutPlaintextBytes","OutgoingCipherKey","OutgoingViewingKey","PreparedEphemeralPublicKey","Recipient","SharedSecret","ShieldedOutput","SymmetricKey","ValueCommitment","as_ref","as_ref","batch","batch_epk","batch_kdf","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmstar","cmstar_bytes","ct_eq","derive_esk","derive_ock","enc_ciphertext","encrypt_note_plaintext","encrypt_outgoing_plaintext","ephemeral_key","epk","epk","epk_bytes","esk","extract_esk","extract_memo","extract_pk_d","fmt","from","from","from","from","from","from","from","get_pk_d","into","into","into","into","into","ka_agree_dec","ka_agree_enc","ka_derive_public","kdf","new","new_with_esk","note_plaintext_bytes","outgoing_plaintext_bytes","parse_note_plaintext_without_memo_ivk","parse_note_plaintext_without_memo_ovk","prepare_epk","to_owned","try_compact_note_decryption","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_note_decryption","try_output_recovery_with_ock","try_output_recovery_with_ovk","type_id","type_id","type_id","type_id","type_id","try_compact_note_decryption","try_note_decryption"],"q":["zcash_note_encryption","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_note_encryption::batch",""],"d":["Trait that encapsulates protocol-specific batch trial …","The size of a compact note.","","Trait that encapsulates protocol-specific note encryption …","The size of an encrypted note plaintext.","Newtype representing the byte encoding of an …","","","","","","","The size of <code>NotePlaintextBytes</code>.","","A struct containing context required for encrypting …","Newtype representing the byte encoding of a note plaintext.","The size of an encrypted outgoing plaintext.","The size of <code>OutPlaintextBytes</code>.","Newtype representing the byte encoding of a outgoing …","A symmetric key that can be used to recover a single …","","","","","Trait that provides access to the components of an …","","","","","APIs for batch trial decryption.","Computes <code>Self::epk</code> on a batch of ephemeral keys.","Computes <code>Self::kdf</code> on a batch of items.","","","","","","","","","","","","","Derives the <code>ExtractedCommitment</code> for this note.","Exposes the <code>cmu_bytes</code> or <code>cmx_bytes</code> field of the output.","","Derives the <code>EphemeralSecretKey</code> corresponding to this note.","Derives the <code>OutgoingCipherKey</code> for an encrypted note, given …","Exposes the note ciphertext of the output.","Generates <code>encCiphertext</code> for this note.","Generates <code>outCiphertext</code> for this note.","Exposes the <code>ephemeral_key</code> field of the output.","Attempts to parse <code>ephemeral_key</code> as an <code>EphemeralPublicKey</code>.","Exposes the encoding of the ephemeral public key being …","Returns the byte encoding of the given <code>EphemeralPublicKey</code>.","Exposes the ephemeral secret key being used to encrypt …","Parses the <code>EphemeralSecretKey</code> field of the outgoing …","Extracts the memo field from the given note plaintext.","Parses the <code>DiversifiedTransmissionKey</code> field of the …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Extracts the <code>DiversifiedTransmissionKey</code> from the note.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Derives the <code>SharedSecret</code> from the recipient’s …","Derives the <code>SharedSecret</code> from the sender’s information …","Derives <code>EphemeralPublicKey</code> from <code>esk</code> and the note’s …","Derives the <code>SymmetricKey</code> used to encrypt the note …","Construct a new note encryption context for the specified …","For use only with Sapling. This method is preserved in …","Encodes the given <code>Note</code> and <code>Memo</code> as a note plaintext.","Encodes the outgoing plaintext for the given note.","Parses the given note plaintext from the recipient’s …","Parses the given note plaintext from the sender’s …","Prepare an ephemeral public key for more efficient scalar …","","Trial decryption of the compact note plaintext by the …","","","","","","","","","","","Trial decryption of the full note plaintext by the …","Recovery of the full note plaintext by the sender.","Recovery of the full note plaintext by the sender.","","","","","","Trial decryption of a batch of notes for light clients …","Trial decryption of a batch of notes with a set of …"],"i":[0,0,7,0,0,0,7,7,7,7,7,7,0,7,0,0,0,0,0,0,7,7,7,7,0,7,7,1,2,0,15,15,1,10,9,8,2,1,10,9,8,2,2,2,7,16,2,7,7,16,8,8,16,7,8,7,8,7,7,7,2,1,1,10,9,8,2,2,7,1,10,9,8,2,7,7,7,7,8,8,7,7,7,7,7,2,0,1,10,9,8,2,1,10,9,8,2,0,0,0,1,10,9,8,2,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[2],0,[3,4],[3,[[4,[5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,2],[[]],[[]],[[]],[[2,2],6],[[],5],[2,1],[[]],[[[8,[7]]]],[[[8,[7]]]],[[],2],[2,5],[[[8,[7]]]],[[],2],[[[8,[7]]]],[9,5],[10],[9,5],[[2,11],12],[[],1],[[]],[[]],[[]],[[]],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2],[5,[[8,[7]]]],[5,[[8,[7]]]],[[],10],[[],9],[[],5],[[2,10],5],[[]],[[]],[[],5],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],5],[1,5],[[],5],[[],14],[[],14],[[],14],[[],14],[[],14],[[],[[4,[5]]]],[[],[[4,[5]]]]],"p":[[3,"OutgoingCipherKey"],[3,"EphemeralKeyBytes"],[8,"Iterator"],[3,"Vec"],[4,"Option"],[3,"Choice"],[8,"Domain"],[3,"NoteEncryption"],[3,"OutPlaintextBytes"],[3,"NotePlaintextBytes"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"],[8,"BatchDomain"],[8,"ShieldedOutput"]]},\
"zcash_primitives":{"doc":"<em>General Zcash primitives.</em>","t":[0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,3,13,13,4,13,13,17,13,13,17,3,13,4,4,13,13,13,13,8,13,13,13,17,3,13,13,13,17,10,11,11,11,11,11,10,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,17,17,17,17,17,17,17,3,17,17,17,17,17,17,17,17,17,17,17,11,11,11,11,11,11,11,11,11,0,0,0,11,11,11,11,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,3,16,16,4,16,16,8,8,8,13,3,16,13,8,3,16,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,2,17,5,5,13,3,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,8,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,13,13,4,13,13,4,3,13,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,8,8,3,3,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,12,10,10,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,17,17,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,13,13,3,3,3,3,3,3,3,4,17,17,3,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,5,11,12,0,12,0,11,12,0,11,11,11,0,11,12,5,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,4,3,3,13,13,13,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,12,5,5,17,17,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,5,5,11,11,11,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,13,13,4,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,16,8,10,0,10,10,10,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,3,17,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,8,3,16,4,16,13,16,16,13,13,16,16,13,3,3,8,16,16,3,3,3,4,16,16,3,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,10,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,12,11,11,11,11,12,11,12,0,0,0,11,11,0,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,3,13,4,13,13,3,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,17,2,2,2,2,2,2,2,2,0,0,0,0,0,0,3,4,17,17,17,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,17,17,17,8,3,11,11,11,11,11,11,11,11,11,10,10,5,5,5,5,5,5,5,5,5,5,0,11,11,11,11,5,5,5,5,5,5,5,5,5,16,8,3,3,3,6,8,3,3,16,3,3,3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,10,11,11,11,11,11,11,5,11,11,11,5,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,4,13,13,3,3,3,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,10,10,10,5,5,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,3,3,8,3,16,3,3,11,12,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,12,11,11,11,11,11,12,12,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,4,13,13,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,10,10,10,10,17,5,5,5,5,5,8,3,3,8,3,3,3,16,12,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,12,12,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,12,11,11,11,11,4,13,3,3,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,10,10,10,10,5,5,5,5,5,5,16,8,8,10,10,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,4,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,17,17,17,17,13,4,3,13,8,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,5,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,5,5,5,5,5,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,4,2,3,2,2,13,13,13,13,4,2,2,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,2,2,2,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,17,17,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,13,13,4,13,13,4,13,13,13,13,13,4,3,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["block","consensus","constants","extensions","keys","legacy","memo","merkle_tree","sapling","transaction","zip32","zip339","BlockHash","BlockHeader","BlockHeaderData","bits","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","dynamic_usage","dynamic_usage_bounds","eq","equihash","final_sapling_root","fmt","fmt","freeze","from","from","from","from_slice","hash","hash","init","init","init","into","into","into","merkle_root","nonce","prev_block","read","solution","time","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","version","vzip","vzip","vzip","write","BlockHeight","Blossom","Blossom","BranchId","Canopy","Canopy","H0","Heartwood","Heartwood","MAIN_NETWORK","MainNetwork","MainNetwork","Network","NetworkUpgrade","Nu5","Nu5","Overwinter","Overwinter","Parameters","Sapling","Sapling","Sprout","TEST_NETWORK","TestNetwork","TestNetwork","ZFuture","ZFuture","ZIP212_GRACE_PERIOD","activation_height","activation_height","activation_height","activation_height","add","add","address_network","address_network","address_network","address_network","b58_pubkey_address_prefix","b58_pubkey_address_prefix","b58_pubkey_address_prefix","b58_pubkey_address_prefix","b58_script_address_prefix","b58_script_address_prefix","b58_script_address_prefix","b58_script_address_prefix","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","coin_type","coin_type","coin_type","coin_type","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","dynamic_usage","dynamic_usage","dynamic_usage","dynamic_usage","dynamic_usage","dynamic_usage","dynamic_usage_bounds","dynamic_usage_bounds","dynamic_usage_bounds","dynamic_usage_bounds","dynamic_usage_bounds","dynamic_usage_bounds","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_height","from","from","from","from","from","from","from","from_u32","hash","height_bounds","height_range","hrp_sapling_extended_full_viewing_key","hrp_sapling_extended_full_viewing_key","hrp_sapling_extended_full_viewing_key","hrp_sapling_extended_full_viewing_key","hrp_sapling_extended_spending_key","hrp_sapling_extended_spending_key","hrp_sapling_extended_spending_key","hrp_sapling_extended_spending_key","hrp_sapling_payment_address","hrp_sapling_payment_address","hrp_sapling_payment_address","hrp_sapling_payment_address","init","init","init","init","init","init","into","into","into","into","into","into","is_nu_active","partial_cmp","sprout_uses_groth_proofs","sub","sub","testing","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","arb_branch_id","arb_height","CRH_IVK_PERSONALIZATION","GH_FIRST_BLOCK","KEY_DIVERSIFICATION_PERSONALIZATION","NOTE_COMMITMENT_RANDOMNESS_GENERATOR","NULLIFIER_POSITION_GENERATOR","NULLIFIER_POSITION_IN_TREE_GENERATOR_PERSONALIZATION","PEDERSEN_HASH_CHUNKS_PER_GENERATOR","PEDERSEN_HASH_EXP_TABLE","PEDERSEN_HASH_EXP_WINDOW_SIZE","PEDERSEN_HASH_GENERATORS","PEDERSEN_HASH_GENERATORS_PERSONALIZATION","PRF_NF_PERSONALIZATION","PROOF_GENERATION_KEY_BASE_GENERATOR_PERSONALIZATION","PROOF_GENERATION_KEY_GENERATOR","SPENDING_KEY_GENERATOR","SPENDING_KEY_GENERATOR_PERSONALIZATION","VALUE_COMMITMENT_GENERATOR_PERSONALIZATION","VALUE_COMMITMENT_RANDOMNESS_GENERATOR","VALUE_COMMITMENT_VALUE_GENERATOR","borrow","borrow_mut","deref","deref","deref_mut","drop","from","init","into","mainnet","regtest","testnet","try_from","try_into","type_id","vzip","B58_PUBKEY_ADDRESS_PREFIX","B58_SCRIPT_ADDRESS_PREFIX","COIN_TYPE","HRP_SAPLING_EXTENDED_FULL_VIEWING_KEY","HRP_SAPLING_EXTENDED_SPENDING_KEY","HRP_SAPLING_PAYMENT_ADDRESS","B58_PUBKEY_ADDRESS_PREFIX","B58_SCRIPT_ADDRESS_PREFIX","COIN_TYPE","HRP_SAPLING_EXTENDED_FULL_VIEWING_KEY","HRP_SAPLING_EXTENDED_SPENDING_KEY","HRP_SAPLING_PAYMENT_ADDRESS","B58_PUBKEY_ADDRESS_PREFIX","B58_SCRIPT_ADDRESS_PREFIX","COIN_TYPE","HRP_SAPLING_EXTENDED_FULL_VIEWING_KEY","HRP_SAPLING_EXTENDED_SPENDING_KEY","HRP_SAPLING_PAYMENT_ADDRESS","transparent","AuthData","BuildCtx","BuildError","Error","Error","Error","Extension","ExtensionTxBuilder","FromPayload","InvalidExtensionId","Precondition","Precondition","ProgramError","ToPayload","Witness","Witness","add_tze_input","add_tze_output","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","eq","eq","eq","eq","extension_id","extension_id","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_payload","init","init","init","init","into","into","into","into","map_payload","mode","mode","payload","payload","to_owned","to_owned","to_owned","to_payload","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_to","try_to","type_id","type_id","type_id","type_id","verify","verify_inner","vzip","vzip","vzip","vzip","OutgoingViewingKey","PRF_EXPAND_PERSONALIZATION","prf_expand","prf_expand_vec","PublicKey","Script","Script","TransparentAddress","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","default","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","fmt","fmt","from","from","hash","init","init","into","into","keys","partial_cmp","read","script","shl","testing","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","write","AccountPrivKey","AccountPubKey","ExternalIvk","ExternalOvk","IncomingViewingKey","InternalIvk","InternalOvk","as_bytes","as_bytes","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default_address","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","derive_address","derive_external_ivk","derive_external_secret_key","derive_internal_ivk","derive_internal_secret_key","deserialize","deserialize","drop","drop","drop","drop","drop","drop","external_ovk","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_bytes","from_extended_privkey","from_seed","init","init","init","init","init","init","internal_ovk","into","into","into","into","into","into","ovks_for_shielding","pubkey_to_address","serialize","serialize","to_account_pubkey","to_bytes","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","arb_transparent_addr","Arbitrary","Empty","Error","Future","InvalidUtf8","Memo","MemoBytes","Text","TextMemo","TooLong","as_array","as_slice","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","empty","encode","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_bytes","from_bytes","from_str","init","init","init","init","into","into","into","into","partial_cmp","provide","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","CommitmentTree","HashSer","Hashable","IncrementalWitness","MerklePath","append","append","auth_path","blank","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","combine","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","empty","empty_root","eq","eq","fmt","fmt","from","from","from","from_frontier","from_path","from_slice","from_tree","incremental","init","init","init","into","into","into","path","position","position","read","read","read","read","root","root","root","size","testing","to_frontier","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","write","write","write","write","SER_V1","SER_V2","read_auth_fragment_v1","read_bridge","read_bridge_v1","read_frontier_v0","read_frontier_v1","read_leu64_usize","read_nonempty_frontier_v1","read_position","write_auth_fragment_v1","write_bridge","write_bridge_v1","write_frontier_v1","write_nonempty_frontier_v1","write_position","write_usize_leu64","arb_commitment_tree","AfterZip212","BeforeZip212","Diversifier","Node","Note","Nullifier","NullifierDerivingKey","PaymentAddress","ProofGenerationKey","Rseed","SAPLING_COMMITMENT_TREE_DEPTH","SAPLING_COMMITMENT_TREE_DEPTH_U8","SaplingIvk","ViewingKey","ak","ak","as_bits","as_ref","base32_len","blank","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_base32","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmu","combine","combine","commitment","create_note","ct_eq","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","derive_esk","diversifier","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","empty_leaf","empty_root","empty_root","encode_hex","encode_hex_upper","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_bytes","from_parts","from_scalar","from_slice","g_d","g_d","g_d","generate_or_derive_esk","group_hash","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","ivk","keys","merkle_hash","nf","nk","note_encryption","nsk","pedersen_hash","pk_d","pk_d","prover","rcm","read","read","redjubjub","rk","rseed","spend_sig","testing","to_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_payment_address","to_payment_address","to_repr","to_vec","to_viewing_key","try_as_bits","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uncommitted","util","value","value","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write","write","write_base32","group_hash","DecodingError","ExpandedSpendingKey","FullViewingKey","InvalidAsk","InvalidNsk","LengthInvalid","OutgoingViewingKey","ask","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","eq","fmt","fmt","fmt","from","from","from","from","from_bytes","from_expanded_spending_key","from_spending_key","init","init","init","init","into","into","into","into","nsk","ovk","ovk","proof_generation_key","read","read","testing","to_bytes","to_bytes","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vk","vzip","vzip","vzip","vzip","write","write","actual","expected","arb_expanded_spending_key","arb_full_viewing_key","KDF_SAPLING_PERSONALIZATION","PRF_OCK_PERSONALIZATION","PreparedEphemeralPublicKey","PreparedIncomingViewingKey","SaplingDomain","batch_epk","batch_kdf","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmstar","deref","deref","deref","deref_mut","deref_mut","deref_mut","derive_esk","derive_ock","drop","drop","drop","dynamic_usage","dynamic_usage","dynamic_usage_bounds","dynamic_usage_bounds","epk","epk_bytes","extract_esk","extract_memo","extract_pk_d","fmt","fmt","for_height","from","from","from","get_pk_d","init","init","init","into","into","into","ka_agree_dec","ka_agree_enc","ka_derive_public","kdf","new","note_plaintext_bytes","outgoing_plaintext_bytes","parse_note_plaintext_without_memo_ivk","parse_note_plaintext_without_memo_ovk","plaintext_version_is_valid","prepare_epk","prf_ock","sapling_ka_agree","sapling_note_encryption","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","try_sapling_compact_note_decryption","try_sapling_note_decryption","try_sapling_output_recovery","try_sapling_output_recovery_with_ock","type_id","type_id","type_id","vzip","vzip","vzip","MerkleTree","NoteCommitment","Personalization","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","from","get_bits","init","into","pedersen_hash","to_owned","try_from","try_into","type_id","vzip","SaplingProvingContext","TxProver","binding_sig","mock","new_sapling_proving_context","output_proof","spend_proof","MockTxProver","binding_sig","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","new_sapling_proving_context","output_proof","spend_proof","try_from","try_into","type_id","vzip","BatchEntry","PrivateKey","PublicKey","Signature","batch_verify","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","fmt","fmt","from","from","from","from","from_private","init","init","init","init","into","into","into","into","randomize","randomize","read","read","read","sign","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","verify","verify_with_zip216","vzip","vzip","vzip","vzip","write","write","write","arb_incoming_viewing_key","arb_node","arb_note","arb_payment_address","generate_random_rseed","hash_to_scalar","CommitmentSum","MAX_NOTE_VALUE","NoteValue","OverflowError","TrapdoorSum","ValueCommitTrapdoor","ValueCommitment","ValueSum","add","add","add","add","add","add_assign","add_assign","as_inner","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","derive","drop","drop","drop","drop","drop","drop","drop","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_bytes_not_small_order","from_raw","init","init","init","init","init","init","init","inner","inner","into","into","into","into","into","into","into","into_bsk","into_bvk","provide","random","sub","sub","sub","sub_assign","sub_assign","sum","sum","sum","testing","to_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","zero","zero","zero","arb_note_value","arb_note_value_bounded","arb_positive_note_value","arb_trapdoor","Authorization","Authorized","Digest","DigestError","HeaderDigest","NotSigned","OrchardAuth","OrchardDigest","Overwinter","Sapling","SaplingAuth","SaplingDigest","Sprout","Transaction","TransactionData","TransactionDigest","TransparentAuth","TransparentDigest","TransparentDigests","TxDigests","TxId","TxVersion","TzeAuth","TzeDigest","TzeDigests","Unauthorized","ZFuture","Zip225","as_ref","auth_commitment","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","builder","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","combine","components","consensus_branch_id","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","digest","digest_header","digest_orchard","digest_sapling","digest_transparent","digest_tze","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","dynamic_usage","dynamic_usage_bounds","eq","eq","eq","expiry_height","fee_paid","fees","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","freeze","from","from","from","from","from","from","from","from","from","from","from_bytes","from_parts","from_parts_zfuture","has_orchard","has_overwinter","has_sapling","has_sprout","has_tze","hash","header","header_digest","init","init","init","init","init","init","init","init","init","init","inputs_digest","into","into","into","into","into","into","into","into","into","into","into_data","lock_time","map_authorization","map_bundles","orchard_bundle","orchard_digest","outputs_digest","outputs_digest","partial_cmp","per_input_digest","prevouts_digest","read","read","read","sapling_bundle","sapling_digest","sapling_value_balance","sequence_digest","sighash","sighash_v4","sighash_v5","sprout_bundle","suggested_for_branch","testing","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","transparent_bundle","transparent_digests","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","txid","txid","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","tze_bundle","tze_digests","util","version","version_group_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write","write","write","write_transparent","write_tze","write_v4","write_v5","write_v5_header","write_v5_sapling","Balance","Builder","ChangeRequired","Error","Fee","InsufficientFunds","Progress","SaplingBuild","TransparentBuild","TzeBuild","add_sapling_output","add_sapling_spend","add_transparent_input","add_transparent_output","add_tze_input","add_tze_output","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","build_zfuture","cur","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","end","eq","fmt","fmt","from","from","from","from","init","init","init","into","into","into","mock_build","new","new","new_with_rng","params","provide","sapling_inputs","sapling_outputs","target_height","test_only_new_with_rng","to_string","transparent_inputs","transparent_outputs","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","with_progress_notifier","Amount","GROTH_PROOF_SIZE","JsDescription","OutPoint","OutputDescription","SpendDescription","TxIn","TxOut","TzeIn","TzeOut","amount","orchard","sapling","sprout","transparent","tze","Amount","BalanceError","COIN","DEFAULT_FEE","MAX_MONEY","NonNegativeAmount","Overflow","Underflow","add","add_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","dynamic_usage","dynamic_usage_bounds","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from_i64","from_i64_le_bytes","from_nonnegative_i64","from_nonnegative_i64","from_nonnegative_i64_le_bytes","from_u64","from_u64","from_u64_le_bytes","init","init","init","into","into","into","is_negative","is_positive","mul","neg","partial_cmp","partial_cmp","sub","sub_assign","sum","testing","to_i64_le_bytes","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","zero","arb_amount","arb_nonnegative_amount","arb_positive_amount","FLAGS_EXPECTED_UNSET","FLAG_OUTPUTS_ENABLED","FLAG_SPENDS_ENABLED","MapAuth","Unauthorized","borrow","borrow_mut","deref","deref_mut","drop","fmt","from","init","into","map_authorization","map_spend_auth","read_action_without_auth","read_anchor","read_cmx","read_flags","read_note_ciphertext","read_nullifier","read_signature","read_v5_bundle","read_value_commitment","read_verification_key","testing","try_from","try_into","type_id","vzip","write_action_without_auth","write_cmx","write_note_ciphertext","write_nullifier","write_v5_bundle","write_value_commitment","write_verification_key","arb_bundle","arb_bundle_for_version","AuthSig","Authorization","Authorized","Bundle","CompactOutputDescription","GrothProofBytes","MapAuth","OutputDescription","OutputDescriptionV5","Proof","SpendDescription","SpendDescriptionV5","Unproven","anchor","apply_signature","apply_signatures","authorization","binding_sig","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","builder","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmstar_bytes","cmstar_bytes","cmu","cmu","cv","cv","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","dynamic_usage","dynamic_usage","dynamic_usage","dynamic_usage_bounds","dynamic_usage_bounds","dynamic_usage_bounds","enc_ciphertext","enc_ciphertext","enc_ciphertext","enc_ciphertext","ephemeral_key","ephemeral_key","ephemeral_key","ephemeral_key","eq","fees","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into_output_description","into_spend_description","map_auth_sig","map_authorization","map_authorization","map_proof","nullifier","out_ciphertext","read","read","read","read","read_base","read_nullifier","read_rk","read_spend_auth_sig","read_zkproof","rk","shielded_outputs","shielded_spends","spend_auth_sig","testing","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value_balance","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write_v4","write_v4","write_v5_without_proof","write_v5_without_witness_data","zkproof","zkproof","AnchorMismatch","BindingSig","Error","InvalidAddress","InvalidAmount","SaplingBuilder","SaplingMetadata","SpendDescriptionInfo","SpendProof","Unauthorized","add_output","add_spend","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","empty","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","init","init","init","init","init","inputs","into","into","into","into","into","new","note_id","output_index","outputs","spend_index","testing","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","value","value_balance","vzip","vzip","vzip","vzip","vzip","InputView","OutputView","note_id","value","value","arb_bundle","arb_bundle_for_version","arb_output_description","Bundle","JsDescription","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","init","init","into","into","joinsplit_pubkey","joinsplit_sig","joinsplits","net_value","read","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","value_balance","vzip","vzip","write","Authorization","Authorized","Bundle","MapAuth","OutPoint","ScriptSig","TxIn","TxOut","apply_signatures","authorization","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","builder","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","fees","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash","init","init","init","init","init","into","into","into","into","into","is_coinbase","map_authorization","map_authorization","map_script_sig","n","new","new","partial_cmp","prevout","read","read","read","recipient_address","script_pubkey","script_pubkey","script_sig","sequence","testing","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","value","value","value_balance","vin","vout","vzip","vzip","vzip","vzip","vzip","write","write","write","Error","InvalidAddress","InvalidAmount","TransparentBuilder","Unauthorized","add_input","add_output","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","clone","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","empty","eq","fmt","fmt","fmt","from","from","from","init","init","init","input_amounts","input_scriptpubkeys","inputs","into","into","into","outputs","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value_balance","vzip","vzip","vzip","InputView","OutputView","coin","outpoint","script_pubkey","value","VALID_OPCODES","arb_bundle","arb_outpoint","arb_script","arb_txin","arb_txout","Authorization","Authorized","Bundle","MapAuth","OutPoint","TzeIn","TzeOut","Witness","authorization","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","builder","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","fees","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","init","init","init","init","init","into","into","into","into","into","into_authorized","map_authorization","map_authorization","map_witness","n","new","new","precondition","precondition","prevout","read","read","read","testing","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","txid","type_id","type_id","type_id","type_id","type_id","value","value","vin","vout","vzip","vzip","vzip","vzip","vzip","witness","write","write","write","write_without_witness","Error","InvalidAmount","TzeBuilder","TzeSigner","Unauthorized","WitnessModeMismatch","add_input","add_output","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clone","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","empty","eq","eq","fmt","fmt","fmt","from","from","from","from","init","init","init","init","inputs","into","into","into","into","outputs","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","value_balance","vzip","vzip","vzip","vzip","InputView","OutputView","coin","outpoint","precondition","value","arb_bundle","arb_outpoint","arb_precondition","arb_tzein","arb_tzeout","arb_witness","Error","FeeRule","FutureFeeRule","fee_required","fee_required_zfuture","fixed","zip317","FeeRule","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","fee_required","fee_required_zfuture","fixed_fee","fmt","from","init","into","non_standard","standard","to_owned","try_from","try_into","type_id","vzip","Balance","FeeError","FeeRule","NonP2pkhInputs","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","eq","fee_required","fmt","fmt","fmt","from","from","from","grace_actions","init","init","into","into","marginal_fee","non_standard","p2pkh_standard_input_size","p2pkh_standard_output_size","standard","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","SIGHASH_ALL","SIGHASH_ANYONECANPAY","SIGHASH_MASK","SIGHASH_NONE","SIGHASH_SINGLE","Shielded","SignableInput","SignatureHash","Transparent","TransparentAuthorizingContext","Tze","as_ref","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","from","from","hash_type","init","init","input_amounts","input_scriptpubkeys","into","into","signature_hash","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","hash_type","index","index","precondition","script_code","script_pubkey","value","value","v4_signature_hash","v5_signature_hash","arb_tx","arb_tx_version","arb_txdata","arb_txid","BlockTxCommitmentDigester","TxIdDigester","borrow","borrow","borrow_mut","borrow_mut","combine","combine","deref","deref","deref_mut","deref_mut","digest_header","digest_header","digest_orchard","digest_orchard","digest_sapling","digest_sapling","digest_transparent","digest_transparent","digest_tze","digest_tze","drop","drop","from","from","init","init","into","into","to_txid","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","sha256d","HashReader","HashWriter","borrow","borrow","borrow_mut","borrow_mut","default","deref","deref","deref_mut","deref_mut","drop","drop","flush","from","from","init","init","into","into","into_base_reader","into_hash","into_hash","new","read","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","write","AccountId","ChainCode","ChildIndex","DiversifiableFullViewingKey","DiversifierIndex","ExtendedFullViewingKey","ExtendedSpendingKey","External","Hardened","Internal","NonHardened","Scope","ZIP32_SAPLING_FVFP_PERSONALIZATION","ZIP32_SAPLING_INT_PERSONALIZATION","ZIP32_SAPLING_MASTER_PERSONALIZATION","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","conditional_select","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","dynamic_usage","dynamic_usage","dynamic_usage_bounds","dynamic_usage_bounds","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_index","hash","hash","increment","init","init","init","init","init","into","into","into","into","into","new","partial_cmp","sapling","sapling_address","sapling_default_address","sapling_derive_internal_fvk","sapling_find_address","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","DiversifiableFullViewingKey","DiversifierKey","ExtendedFullViewingKey","ExtendedSpendingKey","ZIP32_SAPLING_FVFP_PERSONALIZATION","ZIP32_SAPLING_INT_PERSONALIZATION","ZIP32_SAPLING_MASTER_PERSONALIZATION","address","address","as_bytes","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","change_address","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","decrypt_diversifier","default_address","default_address","default_address","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","derive_child","derive_child","derive_internal","derive_internal","diversified_address","diversified_change_address","diversifier","diversifier_index","drop","drop","drop","drop","eq","eq","eq","expsk","find_address","find_address","find_diversifier","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_bytes","from_bytes","from_bytes","from_path","fvk","fvk","init","init","init","init","into","into","into","into","master","master","read","read","sapling_address","sapling_default_address","sapling_derive_internal_fvk","sapling_find_address","testing","to_bytes","to_bytes","to_diversifiable_full_viewing_key","to_diversifiable_full_viewing_key","to_extended_full_viewing_key","to_ivk","to_nk","to_ovk","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","write","write","arb_extended_spending_key","BadEntropyBitCount","BadWordCount","Count","Czech","English","Error","French","InvalidChecksum","Italian","Japanese","Korean","Language","Mnemonic","Portuguese","SimplifiedChinese","Spanish","TraditionalChinese","UnknownWord","Words12","Words15","Words18","Words21","Words24","all","as_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checksum_bits","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","entropy","entropy_bits","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_entropy","from_entropy_in","from_phrase","from_phrase_in","from_str","generate","generate_in","hash","hash","hash","init","init","init","init","into","into","into","into","into_entropy","into_phrase","lang","partial_cmp","partial_cmp","partial_cmp","phrase","provide","to_owned","to_owned","to_owned","to_owned","to_seed","to_string","to_string","to_string","to_string","total_bits","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","validate","validate_in","vzip","vzip","vzip","vzip","word_count","words_by_prefix","zeroize"],"q":["zcash_primitives","","","","","","","","","","","","zcash_primitives::block","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::consensuszcash_primitives::consensus::testing","","zcash_primitives::constants","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::constants::mainnet","","","","","","zcash_primitives::constants::regtest","","","","","","zcash_primitives::constants::testnet","","","","","","zcash_primitives::extensions","zcash_primitives::extensions::transparent","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::keys","","","","zcash_primitives::legacy","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::legacy::keys","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::legacy::testing","zcash_primitives::memo","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::merkle_tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::merkle_tree::incremental","","","","","","","","","","","","","","","","","zcash_primitives::merkle_tree::testing","zcash_primitives::saplingzcash_primitives::sapling::group_hash","zcash_primitives::sapling::keys","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::sapling::keys::DecodingError","","zcash_primitives::sapling::keys::testing","","zcash_primitives::sapling::note_encryption","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::sapling::pedersen_hash","","","","","","","","","","","","","","","","","","","","zcash_primitives::sapling::prover","","","","","","","zcash_primitives::sapling::prover::mock","","","","","","","","","","","","","","","","","zcash_primitives::sapling::redjubjub","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::sapling::testing","","","","zcash_primitives::sapling::util","","zcash_primitives::sapling::value","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::sapling::value::testing","","","","zcash_primitives::transactionzcash_primitives::transaction::builder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::transaction::components","","","","","","","","","","","","","","","","zcash_primitives::transaction::components::amount","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::transaction::components::amount::testing","","","zcash_primitives::transaction::components::orchard","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::transaction::components::orchard::testing","","zcash_primitives::transaction::components::saplingzcash_primitives::transaction::components::sapling::builder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::transaction::components::sapling::fees","","","","","zcash_primitives::transaction::components::sapling::testing","","","zcash_primitives::transaction::components::sprout","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::transaction::components::transparent","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::transaction::components::transparent::builder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::transaction::components::transparent::fees","","","","","","zcash_primitives::transaction::components::transparent::testing","","","","","","zcash_primitives::transaction::components::tze","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::transaction::components::tze::builder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::transaction::components::tze::fees","","","","","","zcash_primitives::transaction::components::tze::testing","","","","","","zcash_primitives::transaction::fees","","","","","","","zcash_primitives::transaction::fees::fixed","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::transaction::fees::zip317","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::transaction::sighash","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::transaction::sighash::SignableInput","","","","","","","","zcash_primitives::transaction::sighash_v4","zcash_primitives::transaction::sighash_v5","zcash_primitives::transaction::testing","","","","zcash_primitives::transaction::txid","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::transaction::util","zcash_primitives::transaction::util::sha256d","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::zip32","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::zip32::sapling","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_primitives::zip32::sapling::testing","zcash_primitives::zip339","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Structs and methods for handling Zcash block headers.","Consensus logic and parameters.","Various constants used by the Zcash primitives.","","","Support for legacy transparent addresses and scripts.","Structs for handling encrypted memos.","Implementation of a Merkle tree of commitments used to …","Structs and constants specific to the Sapling shielded …","Structs and methods for handling Zcash transactions.","Implementation of ZIP 32 for hierarchical deterministic …","ZIP 339 for seed phrase support.","","A Zcash block header.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Constructs a <code>BlockHash</code> from the given slice.","Returns the hash of this header.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","A wrapper type representing blockchain heights. Safe …","The Blossom network upgrade.","The consensus rules deployed by <code>NetworkUpgrade::Blossom</code>.","A globally-unique identifier for a set of consensus rules …","The Canopy network upgrade.","The consensus rules deployed by <code>NetworkUpgrade::Canopy</code>.","","The Heartwood network upgrade.","The consensus rules deployed by <code>NetworkUpgrade::Heartwood</code>.","","Marker struct for the production network.","","","An event that occurs at a specified height on the Zcash …","The Nu5 network upgrade.","The consensus rules deployed by <code>NetworkUpgrade::Nu5</code>.","The Overwinter network upgrade.","The consensus rules deployed by <code>NetworkUpgrade::Overwinter</code>.","Zcash consensus parameters.","The Sapling network upgrade.","The consensus rules deployed by <code>NetworkUpgrade::Sapling</code>.","The consensus rules at the launch of Zcash.","","Marker struct for the test network.","","The ZFUTURE network upgrade.","Candidates for future consensus rules; this branch will …","","Returns the activation height for a particular network …","","","","","","Returns the standard network constant for address …","","","","Returns the human-readable prefix for Base58Check-encoded …","","","","Returns the human-readable prefix for Base58Check-encoded …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The coin type for ZEC, as defined by SLIP 44.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the branch ID corresponding to the consensus rule …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the range of heights for the consensus epoch …","Returns the range of heights for the consensus epoch …","Returns the human-readable prefix for Bech32-encoded …","","","","Returns the human-readable prefix for Bech32-encoded …","","","","Returns the Bech32-encoded human-readable prefix for …","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Determines whether the specified network upgrade is active …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","BLAKE2s Personalization for CRH^ivk = BLAKE2s(ak | nk)","First 64 bytes of the BLAKE2s input during group hash. …","BLAKE2s Personalization for the group hash for key …","The note commitment is randomized over this generator.","The node commitment is randomized again by the position in …","BLAKE2s Personalization for the nullifier position …","The maximum number of chunks per segment of the Pedersen …","The exp table for <code>PEDERSEN_HASH_GENERATORS</code>.","The window size for exponentiation of Pedersen hash …","The generators (for each segment) used in all Pedersen …","BLAKE2s Personalization for Pedersen hash generators.","BLAKE2s Personalization for PRF^nf = BLAKE2s(nk | rho)","BLAKE2s Personalization for the proof generation key base …","The prover will demonstrate knowledge of discrete log with …","The spender proves discrete log with respect to this base …","BLAKE2s Personalization for the spending key base point","BLAKE2s Personalization for the value commitment generator …","The value commitment is randomized over this generator, …","The value commitment is used to check balance between …","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Constants for the Zcash main network.","Regtest constants","Constants for the Zcash test network.","","","","","The prefix for a Base58Check-encoded mainnet …","The prefix for a Base58Check-encoded mainnet …","The mainnet coin type for ZEC, as defined by SLIP 44.","The HRP for a Bech32-encoded mainnet <code>ExtendedFullViewingKey</code>…","The HRP for a Bech32-encoded mainnet <code>ExtendedSpendingKey</code>.","The HRP for a Bech32-encoded mainnet <code>PaymentAddress</code>.","The prefix for a Base58Check-encoded regtest …","The prefix for a Base58Check-encoded regtest …","The regtest cointype reuses the testnet cointype","The HRP for a Bech32-encoded regtest <code>ExtendedFullViewingKey</code>…","The HRP for a Bech32-encoded regtest <code>ExtendedSpendingKey</code>.","The HRP for a Bech32-encoded regtest <code>PaymentAddress</code>.","The prefix for a Base58Check-encoded testnet …","The prefix for a Base58Check-encoded testnet …","The testnet coin type for ZEC, as defined by SLIP 44.","The HRP for a Bech32-encoded testnet <code>ExtendedFullViewingKey</code>…","The HRP for a Bech32-encoded testnet <code>ExtendedSpendingKey</code>.","The HRP for a Bech32-encoded testnet <code>PaymentAddress</code>.","Core traits and structs for Transparent Zcash Extensions.","A typesafe wrapper for witness payloads","","","","","Extension-specific error type. This should encompass both …","This is the primary trait which must be implemented by an …","An interface for transaction builders which support …","Binary parsing capability for TZE preconditions &amp; …","","A condition that can be used to encumber transparent funds.","Extension-specific precondition type. The extension will …","","Binary serialization capability for TZE preconditions &amp; …","Data that satisfies the precondition for prior encumbered …","Extension-specific witness type. The extension will need …","Adds a TZE input to the transaction by providing a witness …","Adds a TZE precondition to the transaction which must be …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Produce the intermediate format for an extension-specific …","Produce the intermediate format for an extension-specific …","Returns the argument unchanged.","Returns the argument unchanged.","Parses an extension-specific witness or precondition from …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns a serialized payload and its corresponding mode.","","","","","","","","","","Attempt to parse an extension-specific precondition value …","Attempt to parse an extension-specific witness value from …","","","","","This is a convenience method intended for use by consensus …","This is the primary method that an extension must …","","","","","","","PRF^expand(sk, t) := BLAKE2b-512(“Zcash_ExpandSeed”, …","","","A serialized script, used inside transparent inputs and …","","A transparent address corresponding to either a public key …","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Generate the <code>scriptPubKey</code> corresponding to this address.","","","","","","","","","","","","","","A type representing a BIP-44 private key at the account …","A type representing a BIP-44 public key at the account …","A type representing an incoming viewing key at the BIP-44 …","External ovk used by zcashd for transparent -&gt; shielded …","","A type representing an incoming viewing key at the BIP-44 …","Internal ovk used for autoshielding.","","","","","","","","","","","","","","","","","","","","","","","Searches the space of child indexes for an index that will …","","","","","","","","","","","","","Derives a transparent address at the provided child index.","Derives the BIP-44 public key at the external “change …","Derives the BIP-44 private spending key for the external …","Derives the BIP-44 public key at the internal “change …","Derives the BIP-44 private spending key for the internal …","","","","","","","","","Derives the external ovk corresponding to this transparent …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Decodes the <code>AccountPrivKey</code> from the encoding specified for …","","Performs derivation of the extended private key for the …","","","","","","","Derives the internal ovk corresponding to this transparent …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Derives the internal ovk and external ovk corresponding to …","Derives the P2PKH transparent address corresponding to the …","","","","Returns the <code>AccountPrivKey</code> serialized using the encoding …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A memo field containing arbitrary bytes.","An empty memo field.","Errors that may result from attempting to construct an …","Some unknown memo format from ✨<em>the future</em>✨ that we can…","","An unencrypted memo received alongside a shielded note in …","The unencrypted memo bytes received alongside a shielded …","A memo field containing a UTF-8 string.","Type-safe wrapper around String to enforce memo length …","","Returns the raw byte array containing the memo bytes, …","Returns a slice of the raw bytes, excluding null padding.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>MemoBytes</code> indicating that no memo is present.","Serializes the <code>Memo</code> per ZIP 302.","","","","","","","","","Returns the argument unchanged.","Serializes the <code>Memo</code> per ZIP 302.","Serializes the <code>Memo</code> per ZIP 302.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a <code>MemoBytes</code> from a slice, exactly as provided.","Parses a <code>Memo</code> from its ZIP 302 serialization.","Returns a <code>Memo</code> containing the given string, or an error if …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Parses a <code>Memo</code> from its ZIP 302 serialization.","","","","","","","","","","","","","A Merkle tree of note commitments.","A hashable node within a Merkle tree.","A hashable node within a Merkle tree.","An updatable witness to a path from a position in a …","A path from a position in a particular commitment tree to …","Adds a leaf node to the tree.","Tracks a leaf node that has been added to the underlying …","","Returns a blank leaf node.","","","","","","","","","","","","","Returns the parent node within the tree of the two given …","","","","","","","","","","Creates an empty tree.","Returns the empty root for the given depth.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Constructs a Merkle path directly from a path and position.","Reads a Merkle path from its serialized form.","Creates an <code>IncrementalWitness</code> for the most recent …","Implementations of serialization and parsing for Orchard …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the current witness, or None if the tree is empty.","Returns the position of the witnessed leaf node in the …","","Parses a node from the given byte source.","Parses a node from the given byte source.","Reads a <code>CommitmentTree</code> from its serialized form.","Reads an <code>IncrementalWitness</code> from its serialized form.","Returns the current root of the tree.","Returns the current root of the tree corresponding to the …","Returns the root of the tree corresponding to this path …","Returns the number of leaf nodes in the tree.","","","","","","","","","","","","","","","","","","Serializes this node.","Serializes this node.","Serializes this tree as an array of bytes.","Serializes this <code>IncrementalWitness</code> as an array of bytes.","","","","","","","","Reads a usize value encoded as a u64 in little-endian …","","","","","","","","","Writes a usize value encoded as a u64 in little-endian …","","","","","A node within the Sapling commitment tree.","","Typesafe wrapper for nullifier values.","A key used to derive the nullifier for a Sapling note.","A Sapling payment address.","","Enum for note randomness before and after ZIP 212.","","","","","","","","","","Returns a blank leaf node.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes the note commitment","","Returns the parent node within the tree of the two given …","Returns [<code>self.cmu</code>] in the correct representation for …","","","","","","","","","","","","","","","","","","","","","","","Returns the derived <code>esk</code> if this note was created after ZIP …","Returns the <code>Diversifier</code> for this <code>PaymentAddress</code>.","","","","","","","","","","","","Returns the empty root for the given depth.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Parses a PaymentAddress from bytes.","Constructs a PaymentAddress from a diversifier and a …","Constructs a new note commitment tree node from a …","","","","The diversified base of the address, GH(d)","","Implementation of group hashing into Jubjub.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Sapling key components.","Compute a parent node in the Sapling commitment tree given …","Computes the nullifier given the nullifier deriving key and","","Implementation of in-band secret distribution for Zcash …","","Implementation of the Pedersen hash function used in …","Returns <code>pk_d</code> for this <code>PaymentAddress</code>.","The public key of the address, g_d^ivk","Abstractions over the proving system and parameters.","","","Parses a node from the given byte source.","Implementation of RedJubjub, a specialization of RedDSA to …","","rseed","Create the spendAuthSig for a Sapling SpendDescription.","","Returns the byte encoding of this <code>PaymentAddress</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Monetary values within the Sapling shielded pool.","The value of the note","","","","","","","","","","","","Serializes this node.","","Produces a random point in the Jubjub curve. The point is …","Errors that can occur in the decoding of Sapling spending …","A Sapling expanded spending key","A Sapling key that provides the capability to view …","Could not decode the <code>ask</code> bytes to a jubjub field element.","Could not decode the <code>nsk</code> bytes to a jubjub field element.","The length of the byte slice provided for decoding was …","An outgoing viewing key","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Decodes the expanded spending key from its serialized …","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Encodes the expanded spending key to the its seralized …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A Sapling ephemeral public key that has been precomputed …","A Sapling incoming viewing key that has been precomputed …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Sapling KDF for note encryption.","Performs the necessary precomputations to use a <code>SaplingIvk</code> …","","","","","","","Sapling PRF^ock.","Sapling key agreement for note encryption.","Creates a new encryption context for the given note.","","","","","","","","","","","Recovery of the full note plaintext by the sender.","Recovery of the full note plaintext by the sender.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","Type for persisting any necessary context across multiple …","Interface for creating zero-knowledge proofs for shielded …","Create the <code>bindingSig</code> for a Sapling transaction. All calls …","","Instantiate a new Sapling proving context.","Create the value commitment and proof for a Sapling …","Create the value commitment, re-randomized key, and proof …","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A sum of Sapling value commitments.","Maximum note value.","The non-negative value of an individual Sapling note.","A value operation overflowed.","A sum of Sapling value commitment blinding factors.","The blinding factor for a <code>ValueCommitment</code>.","A commitment to a <code>ValueSum</code>.","A sum of Sapling note values.","","","","","","","","Returns the inner Jubjub point representing this value …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Derives a <code>ValueCommitment</code> by …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Deserializes a value commitment from its byte …","Creates a note value from its raw numeric value.","","","","","","","","Returns the raw underlying value.","Returns the inner Jubjub scalar representing this trapdoor.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Transform this trapdoor sum into the corresponding …","Transform this value commitment sum into the corresponding …","","Generates a new value commitment trapdoor.","","","","","","","","","Generators for property testing.","Serializes this value commitment to its canonical byte …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Initializes a sum of <code>NoteValue</code>s to zero.","Initializes a sum of <code>ValueCommitTrapdoor</code>s to zero.","Initializes a sum of <code>ValueCommitment</code>s to zero.","Generate an arbitrary value in the range of valid …","Generate an arbitrary value in the range of valid positive …","Generate an arbitrary value in the range of valid positive …","Generate an arbitrary ValueCommitTrapdoor","Authorization state for a bundle of transaction data.","","","","","","","","","","","","","A Zcash transaction.","","","","","","","","The set of defined transaction format versions.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Structs for building transactions.","","","","","","","","","","","","","Structs representing the components within Zcash …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the total fees paid by the transaction, given a …","Abstractions and types related to fee calculations.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Maps the bundles from one type to another.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An overflow or underflow occurred when computing value …","Generates a <code>Transaction</code> from its inputs and outputs.","The transaction has inputs in excess of outputs and fees; …","Errors that can occur during transaction construction.","An error occurred in computing the fees for a transaction.","Insufficient funds were provided to the transaction …","Reports on the progress made by the builder towards …","An error occurred in constructing the Sapling parts of a …","An error occurred in constructing the transparent parts of …","An error occurred in constructing the TZE parts of a …","Adds a Sapling address to send funds to.","Adds a Sapling note to be spent in this transaction.","Adds a transparent coin to be spent in this transaction.","Adds a transparent address to send funds to.","","","","","","","","","Builds a transaction from the configured spends and …","Builds a transaction from the configured spends and …","Returns the number of steps completed so far while …","","","","","","","","","","Returns the total expected number of steps before this …","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Creates a new <code>Builder</code> targeted for inclusion in the block …","Creates a new <code>Builder</code> targeted for inclusion in the block …","Returns the network parameters that the builder has been …","","Returns the set of Sapling inputs currently committed to …","Returns the set of Sapling outputs currently set to be …","Returns the target height of the transaction under …","Creates a new <code>Builder</code> targeted for inclusion in the block …","","Returns the set of transparent inputs currently committed …","Returns the set of transparent outputs currently set to be …","","","","","","","","","","","","","Sets the notifier channel, where progress of building the …","","","","","","","","","","","","","","Structs representing the components within Zcash …","Structs representing the components within Zcash …","Structs representing the TZE components within Zcash …","A type-safe representation of some quantity of Zcash.","A type for balance violations in amount addition and …","","","","A type-safe representation of some nonnegative amount of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Creates an Amount from an i64.","Reads an Amount from a signed 64-bit little-endian integer.","Creates a non-negative Amount from an i64.","Creates a NonNegativeAmount from an i64.","Reads a non-negative Amount from a signed 64-bit …","Creates an Amount from a u64.","Creates a NonNegativeAmount from a u64.","Reads an Amount from an unsigned 64-bit little-endian …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the Amount …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the Amount …","","","","","","","","","Returns the Amount encoded as a signed 64-bit …","","","","","","","","","","","","","","","","","","","Returns a zero-valued Amount.","","","","","","","","Marker for a bundle with no proofs or signatures.","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","Reads an <code>orchard::Bundle</code> from a v5 transaction format.","","","","","","","","","","","","Writes an <code>orchard::Bundle</code> in the v5 transaction format.","","","","","","","","","","","","","","","","","","Returns the root of the Sapling commitment tree that this …","","","Returns the authorization for this bundle.","","","","","","","","","","","","","","","","","","Types and functions for building Sapling transaction …","","","","","","","","","","","","","","","","","","","Returns the commitment to the new note being created.","","Returns the commitment to the value consumed by this spend.","Returns the commitment to the value consumed by this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the encrypted note ciphertext.","","","","","","","","Types related to computation of fees and change related to …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Returns the nullifier of the note being spent.","Returns the output recovery ciphertext.","","","","","Consensus rules (§7.3) &amp; (§7.4):","","Consensus rules (§4.4):","Consensus rules (§4.4):","Consensus rules (§4.4) &amp; (§4.5):","Returns the randomized verification key for the note being …","Returns the list of outputs in this bundle.","Returns the list of spends in this bundle.","Returns the authorization signature for this spend.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the net value moved into or out of the Sapling …","","","","","","","","","","","","","Returns the proof for this spend.","Returns the proof for this output.","","","","","","","Metadata about a transaction created by a <code>SaplingBuilder</code>.","","","","Adds a Sapling address to send funds to.","Adds a Sapling note to be spent in this transaction.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the list of Sapling inputs that will be consumed …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns the index within the transaction of the …","Returns the Sapling outputs that will be produced by the …","Returns the index within the transaction of the …","","","","","","","","","","","","","","","","","","","","","","Returns the net value represented by the spends and …","","","","","","A trait that provides a minimized view of a Sapling input …","A trait that provides a minimized view of a Sapling output …","An identifier for the input being spent.","The value of the input being spent.","The value of the output being produced.","","","produce an output description with invalid data (useful …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","The net value for the JoinSplit. When this is positive, …","","","","","","","","","","The value balance for the bundle. When this is positive, …","","","","","","","","","","","","","","","","","","","","","","","","Types and functions for building transparent transaction …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Types related to computation of fees and change related to …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if this bundle matches the definition of a …","","","","","","","","","","","","Returns the address to which the TxOut was sent, if this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","The amount of value added to or removed from the …","","","","","","","","","","","","","","","","Adds a coin (the output of a previous transaction) to be …","","","","","","","","","","","","","","","","","","","","Constructs a new TransparentBuilder","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the list of transparent inputs that will be …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the transparent outputs that will be produced by …","","","","","","","","","","","","","","","","This trait provides a minimized view of a transparent …","This trait provides a minimized view of a transparent …","The previous output being spent.","The outpoint to which the input refers.","Returns the script corresponding to the newly created …","Returns the value of the output being created.","","","","","","","","","","","","","","","","","","","","","","","","","","Types and functions for building TZE transaction components","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Abstractions and types related to fee calculations for TZE …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Convenience constructor","","","","","Read witness metadata &amp; payload","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Write prevout, extension, and mode followed by witness …","","Write without witness data (for signature hashing)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","This trait provides a minimized view of a TZE input …","This trait provides a minimized view of a TZE output …","The previous output being consumed.","The outpoint to which the input refers.","The precondition that must be satisfied in order to spend …","The value of the newly created output","","","","","","","","A trait that represents the ability to compute the fees …","A trait that represents the ability to compute the fees …","Computes the total fee required for a transaction given …","Computes the total fee required for a transaction given …","","Types related to implementing a <code>FeeRule</code> provides ZIP 317 …","A fee rule that always returns a fixed fee, irrespective …","","","","","","","","","","Returns the fixed fee amount which which this rule was …","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Creates a new nonstandard fixed fee rule with the …","Creates a new fixed fee rule with the standard default fee.","","","","","","An overflow or underflow of amount computation occurred.","Errors that can occur in ZIP 317 fee computation","A <code>FeeRule</code> implementation that implements the ZIP 317 fee …","Transparent inputs provided to the fee calculation …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the ZIP 317 number of grace actions","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the ZIP 317 marginal fee.","Construct a new FeeRule instance with the specified …","Returns the ZIP 317 standard P2PKH input size","Returns the ZIP 317 standard P2PKH output size","Construct a new FeeRule using the standard ZIP 317 …","","","","","","","","","","","","","","","","","","","","","Additional context that is needed to compute signature …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the list of all transparent input amounts, provided","Returns the list of all transparent input scriptPubKeys, …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Computes the signature hash for an input to a transaction, …","","","","","","","","","","","","","","","","","","Implements the Signature Digest section of ZIP 244","","","","","Digester which constructs a digest of only the witness …","A TransactionDigest implementation that commits to all of …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Abstraction over a reader which SHA-256d-hashes the data …","Abstraction over a writer which SHA-256d-hashes the data …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Destroy this reader and return the hash of what was read.","Destroy this writer and return the hash of what was …","Construct a new <code>HashReader</code> given an existing <code>reader</code> by …","","","","","","","","","","","A type-safe wrapper for account identifiers.","A BIP-32 chain code","A child index for a derived key","","","","","A scope used for wallet-external operations, namely …","","A scope used for wallet-internal operations, such as …","","The scope of a viewing key or address.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Sapling key derivation according to ZIP 32 and ZIP 316","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A Sapling key that provides the capability to view …","A key used to derive diversifiers for a particular child …","","A Sapling extended spending key","","","","Attempt to produce a payment address given the specified …","Attempts to produce a valid payment address for the given …","Returns the byte representation of the diversifier key.","","","","","","","","","Returns the internal address corresponding to the smallest …","","","","","","","","","Attempts to decrypt the given address’s diversifier with …","Returns the address with the lowest valid diversifier …","Returns the payment address corresponding to the smallest …","Returns the payment address corresponding to the smallest …","","","","","","","","","","","Derives an internal spending key given an external …","Derives an internal full viewing key used for internal …","Returns the payment address corresponding to the specified …","Returns the change address corresponding to the specified …","Attempts to produce a diversifier at the given index. …","Returns the diversifier index to which this key maps the …","","","","","","","","","Search the diversifier space starting at diversifier index …","Finds the next valid payment address starting from the …","Returns the first index starting from j that generates a …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Constructs the diversifier key from its constituent bytes.","Decodes the extended spending key from its serialized …","Parses a <code>DiversifiableFullViewingKey</code> from its raw byte …","Returns the child key corresponding to the path derived …","Exposes the external <code>FullViewingKey</code> component of this …","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Reads and decodes the encoded form of the extended …","","Attempt to produce a payment address given the specified …","Returns the payment address corresponding to the smallest …","Returns the internal full viewing key and diversifier key …","Search the diversifier space starting at diversifier index …","","Encodes the extended spending key to the its seralized …","Returns the raw encoding of this …","","","","Derives an incoming viewing key corresponding to this full …","Derives a nullifier-deriving key for the provided scope.","Derives an outgoing viewing key corresponding to this full …","","","","","","","","","","","","","","","","","","","","","Writes the encoded form of the extended spending key as …","","","Entropy was not a multiple of 32 bits or between 128-256n …","Mnemonic only support 12/15/18/21/24 words.","Determines the words count that will be present in a …","The Czech language.","The English language.","The BIP-0039 error.","The French language.","The mnemonic has an invalid checksum.","The Italian language.","The Japanese language.","The Korean language.","Language to be used for the mnemonic phrase.","A mnemonic representation.","The Portuguese language.","The Simplified Chinese language.","The Spanish language.","The Traditional Chinese language.","Mnemonic contains an unknown word.","12 words, entropy length: 128 bits, the checksum length: 4 …","15 words, entropy length: 160 bits, the checksum length: 5 …","18 words, entropy length: 192 bits, the checksum length: 6 …","21 words, entropy length: 224 bits, the checksum length: 7 …","24 words, entropy length: 256 bits, the checksum length: 8 …","The list of supported languages. Language support is …","","","","","","","","","","Returns the number of checksum bits.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the original entropy of the mnemonic phrase.","Returns the number of entropy bits.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new English <code>Mnemonic</code> from the given entropy.","Creates a new <code>Mnemonic</code> in the specified language from the …","Creates a <code>Mnemonic</code> from an existing mnemonic phrase.","Creates a <code>Mnemonic</code> from an existing mnemonic phrase in the …","","Generates a new English <code>Mnemonic</code> randomly in the specified …","Generates a new <code>Mnemonic</code> randomly in the specified …","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the <code>Mnemonic</code> and return the entropy as a <code>Vec&lt;u8&gt;</code>.","Consumes the <code>Mnemonic</code> and return the phrase as a <code>String</code>.","Returns the <code>Language</code> of the mnemonic.","","","","Returns the mnemonic phrase as a string slice.","","","","","","Generates the seed from the <code>Mnemonic</code> and the passphrase.","","","","","Returns the number of entropy+checksum bits.","","","","","","","","","","","","","","Validates the word count and checksum of an English …","Validates the word count and checksum of a mnemonic phrase …","","","","","Returns the number of words.","Returns words from the word list that start with the given …",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,3,4,1,3,4,1,1,1,3,3,4,1,3,4,1,3,4,1,1,1,1,0,4,1,1,4,3,4,1,1,3,1,3,4,1,3,4,1,4,4,4,3,4,4,1,1,3,4,1,3,4,1,3,4,1,4,3,4,1,3,0,14,22,0,14,22,0,14,22,0,0,19,0,0,14,22,14,22,0,14,22,22,0,0,19,14,22,0,107,17,18,19,15,15,107,17,18,19,107,17,18,19,107,17,18,19,15,17,18,19,14,22,15,17,18,19,14,22,15,17,18,19,14,22,15,17,18,19,14,22,15,107,17,18,19,15,17,18,19,14,22,15,17,18,19,14,22,15,17,18,19,14,22,15,17,18,19,14,22,15,17,18,19,14,22,15,17,18,19,22,15,15,17,18,19,14,14,22,22,15,15,17,18,19,14,22,15,15,22,22,107,17,18,19,107,17,18,19,107,17,18,19,15,17,18,19,14,22,15,17,18,19,14,22,107,15,22,15,15,0,15,17,18,19,14,22,15,14,15,15,15,15,17,18,19,14,22,22,15,17,18,19,14,22,15,17,18,19,14,22,15,17,18,19,14,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,30,30,30,30,30,30,30,30,0,0,0,30,30,30,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,228,0,42,229,0,0,0,38,0,229,38,0,0,229,228,228,33,34,36,38,33,34,36,38,33,34,36,33,34,36,33,34,36,38,33,34,36,38,33,34,36,38,33,34,36,38,34,36,33,34,36,38,38,33,34,34,36,36,38,42,33,34,36,38,33,34,36,38,36,34,36,34,36,33,34,36,230,38,33,34,36,38,33,34,36,38,34,36,33,34,36,38,229,229,33,34,36,38,0,0,0,0,45,0,45,0,44,45,44,45,44,45,44,45,45,44,44,45,44,45,44,45,44,45,44,45,44,45,45,44,45,44,45,0,45,44,45,44,0,44,45,44,45,44,45,44,45,44,45,44,0,0,0,0,0,0,0,46,47,46,47,48,49,50,51,46,47,48,49,50,51,48,49,50,51,48,49,50,51,231,46,47,48,49,50,51,46,47,48,49,50,51,231,49,48,49,48,231,49,46,47,48,49,50,51,49,48,49,50,51,46,47,48,49,50,51,48,48,48,46,47,48,49,50,51,49,46,47,48,49,50,51,49,0,231,49,48,48,48,49,50,51,46,47,48,49,50,51,46,47,48,49,50,51,46,47,48,49,50,51,46,47,48,49,50,51,0,60,60,0,60,61,0,0,60,0,61,58,58,61,58,59,60,61,58,59,60,58,59,60,58,59,60,58,60,61,58,59,59,60,61,58,59,60,61,58,59,60,58,60,61,58,59,60,61,61,58,60,61,58,58,58,59,60,58,60,60,61,58,59,60,61,58,59,60,58,61,58,59,60,61,61,58,59,60,60,61,58,59,60,61,58,59,60,61,58,59,60,0,0,0,0,0,64,65,66,63,64,65,66,64,65,66,64,65,66,64,65,66,63,64,65,66,64,65,66,64,65,66,64,63,64,66,64,66,64,65,66,64,66,66,65,0,64,65,66,64,65,66,65,65,66,63,68,64,65,64,65,66,64,0,64,64,65,66,64,65,66,64,65,66,64,65,66,64,65,66,63,68,64,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,86,0,0,0,0,0,0,0,0,0,0,0,0,80,82,76,76,76,79,79,80,81,82,83,84,85,86,76,87,79,80,81,82,83,84,85,86,76,87,76,79,80,81,82,83,84,85,86,76,87,79,80,81,82,83,84,85,86,76,87,87,79,79,87,85,76,79,80,81,82,83,84,85,86,76,87,79,80,81,82,83,84,85,86,76,87,87,85,79,80,81,82,83,84,85,86,76,87,79,79,79,76,76,79,81,84,85,76,87,79,81,82,83,84,85,86,76,87,79,80,81,82,83,84,85,86,76,87,85,85,79,76,84,85,87,87,0,79,80,81,82,83,84,85,86,76,87,79,80,81,82,83,84,85,86,76,87,82,0,0,87,82,0,80,0,85,87,0,87,79,79,0,82,87,0,0,85,79,80,81,82,83,84,85,86,76,87,82,83,83,76,80,76,79,80,81,82,83,84,85,86,76,87,79,80,81,82,83,84,85,86,76,87,79,80,81,82,83,84,85,86,76,87,87,0,0,87,79,80,81,82,83,84,85,86,76,87,79,79,76,0,0,0,0,101,101,101,0,99,101,98,99,100,101,98,99,100,98,99,100,98,99,100,101,98,99,100,101,98,99,100,101,98,99,100,98,98,99,100,101,98,99,100,99,100,99,101,98,99,100,101,98,99,100,99,99,100,99,99,100,0,99,100,98,99,100,101,98,99,100,101,98,99,100,101,98,99,100,100,101,98,99,100,99,100,232,232,0,0,0,0,0,0,0,109,109,109,103,104,109,103,104,103,104,103,104,109,109,103,104,109,103,104,109,109,109,103,104,109,103,109,103,109,109,109,109,109,103,104,109,109,103,104,109,109,103,104,109,103,104,109,109,109,109,103,109,109,109,109,0,109,0,0,0,103,104,109,103,104,109,103,104,0,0,0,0,109,103,104,109,103,104,116,116,0,116,116,116,116,116,116,116,116,116,116,116,0,116,116,116,116,116,233,0,233,0,233,233,233,0,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,0,0,0,0,0,95,234,96,118,95,234,96,118,96,118,96,118,95,234,96,118,95,234,96,118,95,234,96,118,96,118,95,234,96,118,118,95,234,96,118,95,234,96,118,95,118,95,96,118,95,96,118,95,234,96,118,95,234,96,118,95,234,96,118,118,118,95,234,96,118,95,96,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,121,123,122,112,121,123,112,124,120,121,123,119,122,112,124,120,121,123,119,122,112,120,121,123,119,122,112,120,121,123,119,122,112,120,119,124,120,121,123,119,122,112,124,120,121,123,119,122,112,112,124,120,121,123,119,122,112,120,119,124,124,120,121,123,119,122,112,124,120,121,123,119,122,112,112,119,124,120,121,123,119,122,112,119,122,124,120,121,123,119,122,112,121,123,124,122,120,122,112,121,123,121,123,123,0,112,120,121,123,119,122,112,124,124,120,121,123,119,122,112,124,120,121,123,119,122,112,124,120,121,123,119,122,112,124,120,121,123,119,122,112,120,121,123,0,0,0,0,0,0,137,0,137,235,135,137,131,131,135,137,131,0,0,0,135,137,0,0,0,0,135,137,0,0,131,131,129,130,202,235,129,131,142,130,136,132,133,134,202,235,129,131,142,130,136,132,133,134,0,129,131,132,133,134,129,131,132,133,134,129,137,0,136,202,235,129,131,142,130,130,136,132,133,134,202,235,129,131,142,130,136,132,133,134,136,137,137,137,137,137,202,235,129,131,142,130,136,132,133,134,129,129,129,131,130,136,136,0,129,129,131,142,130,136,132,133,134,136,202,235,129,131,142,130,136,132,133,134,129,136,136,131,131,131,131,131,129,131,134,202,235,129,131,142,130,136,132,133,134,133,202,235,129,131,142,130,136,132,133,134,130,136,136,136,136,134,132,133,129,133,132,129,131,130,136,134,136,132,0,0,0,136,131,0,129,131,132,133,134,129,136,134,202,235,129,131,142,130,136,132,133,134,202,235,129,131,142,130,136,132,133,134,0,130,202,235,129,131,142,130,136,132,133,134,136,134,0,136,131,202,235,129,131,142,130,136,132,133,134,129,131,130,130,130,130,130,130,130,155,0,155,0,155,155,0,155,155,155,148,148,148,148,148,148,156,148,155,156,148,155,148,148,156,156,148,155,156,148,155,156,148,155,156,155,155,155,156,148,155,155,156,148,155,156,148,155,148,156,148,148,148,155,148,148,148,148,155,148,148,156,148,155,156,148,155,156,148,155,156,148,155,148,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,157,157,32,32,32,161,157,32,161,157,32,161,157,32,161,157,32,161,32,161,157,32,161,157,32,161,157,32,32,32,161,157,32,161,157,157,32,32,161,157,32,32,32,161,32,32,161,32,32,161,157,32,161,157,32,32,32,32,32,161,32,32,32,0,32,32,161,157,157,32,32,32,161,157,32,161,157,32,161,157,32,161,157,32,0,0,0,0,0,0,0,0,164,164,164,164,164,164,164,164,164,146,146,0,0,0,0,0,0,0,0,0,0,0,164,164,164,164,0,0,0,0,0,0,0,0,0,177,0,0,0,0,0,0,0,0,177,0,0,0,178,178,139,139,180,181,180,139,178,182,115,183,184,181,180,139,178,182,115,183,184,0,181,180,139,178,182,115,183,184,181,180,139,178,182,115,183,184,115,184,115,184,178,115,181,180,139,178,182,115,183,184,181,180,139,178,182,115,183,184,181,180,139,178,182,115,183,184,115,183,184,115,183,184,115,115,184,184,115,115,184,184,181,0,181,180,139,178,115,181,180,139,178,182,115,183,184,184,181,180,139,178,182,115,183,184,181,180,139,178,182,115,183,184,183,182,145,145,139,145,178,115,178,182,115,183,0,178,178,178,0,178,139,139,178,0,181,180,139,178,182,115,183,184,181,180,139,178,182,115,183,184,181,180,139,178,182,115,183,184,181,180,139,178,182,115,183,184,139,181,180,139,178,182,115,183,184,178,115,115,178,178,115,149,149,0,149,149,0,0,0,149,0,187,187,187,149,188,189,179,187,149,188,189,179,187,188,189,179,188,189,179,187,149,188,189,179,187,149,188,189,179,187,149,188,189,179,189,149,189,149,149,188,189,179,187,149,188,189,179,187,149,188,189,179,187,187,149,188,189,179,187,188,189,187,189,0,188,189,179,149,187,149,188,189,179,187,149,188,189,179,187,149,188,189,179,188,187,187,149,188,189,179,0,0,236,236,237,0,0,0,0,0,143,190,143,190,143,190,143,190,143,190,143,190,143,190,143,190,143,190,143,190,143,190,143,143,143,190,190,143,190,143,190,143,190,143,190,143,143,190,190,0,0,0,0,0,193,0,0,140,140,192,140,151,194,152,192,140,151,194,152,0,192,140,151,194,152,192,140,151,194,152,151,192,140,151,194,152,192,140,151,194,152,192,140,151,194,152,192,140,151,194,152,0,192,140,151,194,152,192,140,151,194,152,151,192,140,151,194,152,192,140,151,194,152,140,144,140,144,151,151,194,151,194,151,194,152,152,152,152,194,194,0,192,140,151,194,152,192,140,151,194,152,192,140,151,194,152,192,140,151,194,152,152,152,140,140,140,192,140,151,194,152,151,194,152,0,153,153,0,0,195,195,195,153,191,195,153,191,195,191,191,195,153,191,195,153,191,195,153,191,195,153,153,153,191,195,153,191,195,153,191,191,191,195,195,153,191,195,191,153,195,153,191,195,153,191,195,153,191,195,195,153,191,0,0,238,238,239,239,0,0,0,0,0,0,0,0,0,0,0,0,0,197,141,196,141,198,199,200,196,141,198,199,200,0,196,141,198,199,200,196,141,198,199,200,196,141,198,199,200,196,141,198,199,200,196,141,198,199,200,196,141,198,199,200,0,196,141,198,199,200,196,141,198,199,200,196,141,198,199,200,196,141,198,199,200,141,147,141,147,198,198,199,200,200,199,198,199,200,0,196,141,198,199,200,196,141,198,199,200,196,141,198,199,200,198,196,141,198,199,200,200,200,141,141,196,141,198,199,200,199,198,199,200,199,0,204,0,0,0,204,205,205,203,205,204,201,203,205,204,201,205,201,201,203,205,204,201,203,205,204,201,203,205,204,201,205,204,201,204,204,201,203,205,204,201,203,205,204,201,205,203,205,204,201,205,201,204,203,205,204,201,203,205,204,201,203,205,204,201,205,203,205,204,201,0,0,240,240,241,241,0,0,0,0,0,0,242,0,0,242,243,0,0,0,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,208,0,0,208,207,208,207,208,207,208,207,208,207,208,207,208,207,208,208,207,207,208,208,207,208,208,207,207,208,207,208,207,207,207,207,207,207,208,208,207,208,207,208,207,208,207,208,0,0,0,0,0,210,0,0,210,0,210,209,210,209,210,209,210,209,210,209,210,209,210,209,210,210,209,244,244,210,209,0,210,209,210,209,210,209,210,209,245,245,246,246,245,245,245,246,0,0,0,0,0,0,0,0,211,212,211,212,211,212,211,212,211,212,211,212,211,212,211,212,211,212,211,212,211,212,211,212,211,212,211,212,0,211,212,211,212,211,212,211,212,0,0,0,214,213,214,213,213,214,213,214,213,214,213,213,214,213,214,213,214,213,214,214,213,214,214,214,213,214,213,214,213,214,213,213,0,0,0,0,0,0,0,220,217,220,217,0,0,0,0,55,217,218,219,220,55,217,218,219,220,55,217,218,219,220,55,217,218,219,220,55,55,55,219,55,217,218,219,220,55,217,218,219,220,55,217,218,219,220,55,220,55,220,55,217,218,219,220,55,217,218,219,220,55,55,217,218,219,219,219,220,217,55,220,219,55,217,218,219,220,55,217,218,219,220,219,55,0,0,0,0,0,55,217,218,219,220,55,217,218,219,220,55,217,218,219,220,55,217,218,219,220,55,217,218,219,220,0,0,0,0,0,0,0,221,222,223,223,150,221,222,223,150,221,222,222,223,150,221,222,223,150,221,222,222,150,221,222,223,150,221,222,223,150,221,222,150,221,150,221,222,222,223,223,223,150,221,222,223,150,221,150,221,222,223,223,150,221,222,223,150,221,222,222,222,223,150,222,150,222,221,223,150,221,222,223,150,221,222,223,150,150,221,0,0,0,0,0,150,222,150,221,150,222,222,222,223,150,221,222,223,150,221,222,223,150,221,222,223,150,221,222,223,150,221,222,150,221,0,226,226,0,227,227,0,227,226,227,227,227,0,0,227,227,227,227,226,225,225,225,225,225,227,224,226,227,225,224,226,227,225,224,225,226,227,225,224,226,227,225,224,227,225,224,227,225,226,227,225,224,226,227,225,224,226,227,225,224,224,224,225,226,227,225,224,226,226,227,227,225,225,224,224,226,227,225,224,224,224,224,224,224,224,224,227,225,224,226,227,225,224,226,227,225,224,224,224,224,227,225,224,224,226,226,227,225,224,224,226,227,225,224,225,226,227,225,225,224,226,227,225,224,226,227,225,224,224,224,226,227,225,224,225,227,224],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[[]],[2],[3,4],[2],[2],[2],[2],[2],[2],[2],[2],[1,2],[1],[[1,1],5],0,0,[[1,6],7],[[1,6],7],[4,[[8,[3]]]],[[]],[[]],[[]],[[],1],[3,1],[1],[[],2],[[],2],[[],2],[[]],[[]],[[]],0,0,0,[9,[[8,[3]]]],0,0,[[]],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],0,[[]],[[]],[[]],[[3,13],8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[14,[[16,[15]]]],[[17,14],[[16,[15]]]],[[18,14],[[16,[15]]]],[[19,14],[[16,[15]]]],[[15,20],15],[[15,15],15],[[],[[16,[21]]]],[17,[[16,[21]]]],[18,[[16,[21]]]],[19,[[16,[21]]]],[[]],[17],[18],[19],[[]],[17],[18],[19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[15,15],[17,17],[18,18],[19,19],[14,14],[22,22],[[]],[[]],[[]],[[]],[[]],[[]],[[15,15],23],[[],20],[17,20],[18,20],[19,20],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[15,2],[17,2],[18,2],[19,2],[14,2],[22,2],[15],[17],[18],[19],[14],[22],[[15,15],5],[[17,17],5],[[18,18],5],[[19,19],5],[[22,22],5],[[15,6],7],[[15,6],7],[[17,6],7],[[18,6],7],[[19,6],7],[[14,6],7],[[14,6],7],[[22,6],7],[15,22],[20,15],[[]],[[]],[[]],[[]],[[]],[[]],[20,15],[15],[22,16],[22,[[16,[[24,[15]]]]]],[[],25],[17,25],[18,25],[19,25],[[],25],[17,25],[18,25],[19,25],[[],25],[17,25],[18,25],[19,25],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[14,15],5],[[15,15],[[16,[23]]]],[22,5],[[15,15],15],[[15,20],15],0,[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[26,[[11,[15]]]],[27,[[11,[15]]]],[28,[[11,[15]]]],[[],11],[[],11],[[],11],[[],11],[[],11],[20,[[11,[22]]]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[]],[[]],[[]],[[]],[[]],[[]],[[],29],[22,29],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[2],[30,31],[2],[2],[[]],[[],2],[[]],0,0,0,[[],11],[[],11],[[],12],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[20,20],11],[[20,32],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[33,33],[34,34],[[[36,[35]]],[[36,[35]]]],[[]],[[]],[[]],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[[33,33],5],[[34,34],5],[[[36,[37]],36],5],[[[38,[37]],38],5],0,0,[[33,6],7],[[34,6],7],[[[36,[39]],6],7],[[[38,[40]],6],7],[[[38,[39]],6],7],[[]],[[]],[20,34],[20,[[36,[33]]]],[[]],[[]],[20,11],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[36,41],36],0,0,0,0,[[]],[[]],[[]],[[]],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[34,[[11,[42]]]],[[[36,[33]]],[[11,[42]]]],[[],12],[[],12],[[],12],[[],12],[[34,36],11],[[],11],[[]],[[]],[[]],[[]],0,0,[[],43],[[],43],0,0,0,0,[[]],[[]],[[]],[[]],[44,44],[45,45],[[]],[[]],[[45,45],23],[[],44],[2],[2],[2],[2],[2],[2],[[44,44],5],[[45,45],5],[[44,6],7],[[45,6],7],[[]],[[]],[45],[[],2],[[],2],[[]],[[]],0,[[45,45],[[16,[23]]]],[9,[[8,[44]]]],[45,44],[44,44],0,[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[]],[[]],[[44,13],8],0,0,0,0,0,0,0,[46],[47],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[48,48],[49,49],[50,50],[51,51],[[]],[[]],[[]],[[]],[[]],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[20,[[11,[45,52]]]],[49,[[11,[50,52]]]],[[48,20],[[11,[53,52]]]],[49,[[11,[51,52]]]],[[48,20],[[11,[53,52]]]],[[],[[11,[52]]]],[[],[[11,[49,52]]]],[2],[2],[2],[2],[2],[2],[49,47],[[48,6],7],[[49,6],7],[[50,6],7],[[51,6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[16,[48]]]],[54,48],[55,[[11,[48,52]]]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[49,46],[[]],[[]],[[]],[[]],[[]],[[]],[49],[56,45],[[],[[31,[57]]]],[49,[[31,[57]]]],[48,49],[48,[[31,[57]]]],[[]],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[]],[[]],[[]],[[]],[[]],[[]],[[],29],0,0,0,0,0,0,0,0,0,0,[58],[58],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[58,58],[59,59],[60,60],[[]],[[]],[[]],[[58,58],23],[[],60],[2],[2],[59,25],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[[],58],[60,58],[[61,61],5],[[58,58],5],[[59,59],5],[[60,60],5],[[61,6],7],[[61,6],7],[[58,6],7],[[60,6],7],[[]],[60,58],[60,58],[[]],[[]],[[]],[[],[[11,[58,61]]]],[[],[[11,[60,61]]]],[25,[[11,[60]]]],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[58,58],[[16,[23]]]],[62],[[]],[[]],[[]],[[],10],[[],11],[[],11],[[],11],[[],11],[58,[[11,[60]]]],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[]],[[]],[[]],[[]],0,0,0,0,0,[[[64,[63]],63],11],[[[65,[63]],63],11],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[64,[35]]],[[64,[35]]]],[[[65,[[0,[35,63]]]]],[[65,[[0,[35,63]]]]]],[[[66,[[0,[35,63]]]]],[[66,[[0,[35,63]]]]]],[[]],[[]],[[]],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[[],64],[2],[[[64,[37]],64],5],[[[66,[[0,[37,63]]]],66],5],[[[64,[39]],6],7],[[[66,[[0,[39,63]]]],6],7],[[]],[[]],[[]],[67,64],[[31,28],[[66,[63]]]],[[],[[11,[[66,[63]]]]]],[64,[[65,[63]]]],0,[[],2],[[],2],[[],2],[[]],[[]],[[]],[[[65,[63]]],[[16,[[66,[63]]]]]],[[[65,[63]]],2],0,[9,8],[9,8],[9,[[8,[[64,[63]]]]]],[9,[[8,[[65,[63]]]]]],[[[64,[63]]],63],[[[65,[63]]],63],[[[66,[63]],63],63],[64,2],0,[64,67],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[]],[[]],[[]],[13,8],[13,8],[[[64,[63]],13],8],[[[65,[63]],13],8],0,0,[9,[[8,[[69,[68]]]]]],[9,[[8,[[71,[[0,[68,70,35]]]]]]]],[9,[[8,[[71,[[0,[68,70,35]]]]]]]],[9,[[8,[[67,[[0,[72,63]]]]]]]],[9,[[8,[[67,[[0,[68,35]]]]]]]],[9,[[8,[2]]]],[9,[[8,[[73,[[0,[68,35]]]]]]]],[9,[[8,[74]]]],[[13,69],8],[[13,71],8],[[13,71],8],[[13,67],8],[[13,73],8],[[13,74],8],[[13,2],8],[[2,29,57],29],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],75],[76],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[11,[[31,[77,78]]]]]],[79,79],[80,80],[81,81],[82,82],[83,83],[84,84],[85,85],[86,86],[76,76],[87,87],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[87,88],[[89,79,79],79],[2],[87,79],[[85,28,86],[[16,[87]]]],[[76,76],90],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[87,[[16,[91]]]],[85,84],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[[],79],[2],[89,79],[[]],[[]],[[79,79],5],[[81,81],5],[[84,84],5],[[85,85],5],[[76,76],5],[[87,87],5],[[79,6],7],[[81,6],7],[[82,6],7],[[83,6],7],[[84,6],7],[[85,6],7],[[86,6],7],[[76,6],7],[[87,6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[16,[85]]]],[[84,92],[[16,[85]]]],[88,79],[[],[[11,[76,93]]]],[84,[[16,[92]]]],[85,[[16,[92]]]],0,[87,91],0,[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[82,83],0,[2],[[87,81,28],76],0,0,0,0,[85,92],0,0,[87,91],[9,[[8,[79]]]],[[],[[11,[94]]]],0,[[82,91],92],0,[[95,91],96],0,[85],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[82,84],[[16,[85]]]],[[83,84],[[16,[85]]]],[83],[76,[[31,[57]]]],[80,82],[[],[[11,[75,97]]]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],88],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[79,13],8],[[],[[11,[94]]]],[[],11],[[],[[16,[92]]]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[98,98],[99,99],[100,100],[[]],[[]],[[]],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[[98,98],5],[[98,6],7],[[99,6],7],[[100,6],7],[[]],[[]],[[]],[[]],[[],[[11,[99,101]]]],[99,100],[[],99],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],0,0,0,[99,80],[9,[[8,[99]]]],[9,[[8,[100]]]],0,[99],[100],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],0,[[]],[[]],[[]],[[]],[[99,13],8],[[100,13],8],0,0,[[],29],[[],29],0,0,0,0,0,[102,31],[102,[[31,[16]]]],[[]],[[]],[[]],[[]],[[]],[[]],[103,103],[104,104],[[]],[[]],[[]],[2],[2],[2],[2],[2],[2],[[],16],[105,106],[2],[2],[2],[[[109,[[0,[107,108]]]]],2],[103,2],[[[109,[[0,[107,108]]]]]],[103],[105,16],[[],105],[110,16],[[[109,[107]],111]],[110,16],[[103,6],7],[[104,6],7],[[107,15],[[109,[107]]]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[92,105],43],[83,103],[[],111],[[],110],[[[109,[107]]],16],[[[109,[107]],105,111],16],[[15,57],5],[[]],[[98,112,105],106],[[91,113],92],[[[16,[98]],87,85,58],[[114,[[109,[107]]]]]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[15,103],16],[[15,103],16],[[15,98,115],16],[[15,106,115],16],[[],12],[[],12],[[],12],[[]],[[]],[[]],0,0,0,[[]],[[]],[116,116],[[]],[2],[2],[2],[[]],[116,[[31,[5]]]],[[],2],[[]],[116,92],[[]],[[],11],[[],11],[[],12],[[]],0,0,[32,[[11,[96]]]],0,[[]],[[91,85,91,28]],[[80,84,86,91,28,88,[66,[79]]],11],0,[[117,32],[[11,[96]]]],[[]],[[]],[2],[2],[2],[[]],[[],2],[[]],[117],[[117,91,85,91,28]],[[117,80,84,86,91,28,88,[66,[79]]],11],[[],11],[[],11],[[],12],[[]],0,0,0,0,[92,5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[96,96],[118,118],[[]],[[]],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[[96,6],7],[[118,6],7],[[]],[[]],[[]],[[]],[[95,92],118],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[95,91],95],[[118,91,92],118],[9,[[8,[95]]]],[9,[[8,[96]]]],[9,[[8,[118]]]],[[95,92],96],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[118,96,92],5],[[118,96,92,5],5],[[]],[[]],[[]],[[]],[[95,13],8],[[96,13],8],[[118,13],8],[[],29],[[],29],[119,29],[[],29],[15,86],[[],91],0,0,0,0,0,0,0,0,[[120,119]],[[121,122]],[[123,112]],[[122,122]],[[112,112]],[[121,122]],[[123,112]],[112,113],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[120,120],[121,121],[123,123],[119,119],[122,122],[112,112],[[]],[[]],[[]],[[]],[[]],[[]],[[],120],[[],119],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[[119,122],112],[2],[2],[2],[2],[2],[2],[2],[[120,120],5],[[119,119],5],[[124,6],7],[[124,6],7],[[120,6],7],[[121,6],7],[[123,6],7],[[119,6],7],[[122,6],7],[[112,6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[125,[112]]]],[28,119],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[119,28],[122,126],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[121,95],[[123,[127,[26]]],118],[62],[128,122],[[120,119]],[[122,122]],[[112,112]],[[121,122]],[[123,112]],[102,121],[102,123],[102,123],0,[112],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],120],[[],121],[[],123],[[],29],[28,29],[28,29],[[],29],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[129],[130,43],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[129,129],[131,131],[[[132,[35]]],[[132,[35]]]],[[[133,[35]]],[[133,[35]]]],[[[134,[35]]],[[134,[35]]]],[[]],[[]],[[]],[[]],[[]],[[129,129],23],[[]],0,[[[136,[135]]],22],[2],[2],[2],[2],[2],[130,136],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[[[136,[135]],[137,[135]]]],[[131,22,20,15]],[[[16,[138]]]],[[[16,[139]]]],[[[16,[140]]]],[[[16,[141]]]],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[129,2],[129],[[129,129],5],[[131,131],5],[[130,130],5],[[[136,[135]]],15],[[[136,[135]]],[[11,[32]]]],0,[[129,6],7],[[129,6],7],[[131,6],7],[[142,6],7],[[130,6],7],[[[136,[[0,[39,135]]]],6],7],[[[132,[39]],6],7],[[[133,[39]],6],7],[[[134,[39]],6],7],[[[136,[142]]],[[8,[130]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],129],[[131,22,20,15,[16,[140]],[16,[143]],[16,[139]],[16,[[138,[32]]]]],[[136,[135]]]],[[131,22,20,15,[16,[140]],[16,[143]],[16,[139]],[16,[[138,[32]]]],[16,[141]]],[[136,[135]]]],[131,5],[131,5],[131,5],[131,5],[131,5],[129],[131,20],0,[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[130,[[136,[142]]]],[[[136,[135]]],20],[[[136,[135]],144,145,146,147],[[136,[135]]]],[[[136,[135]],41,41,41,41],[[136,[135]]]],[[[136,[135]]],[[16,[138]]]],0,0,0,[[129,129],[[16,[23]]]],0,0,[9,[[8,[129]]]],[9,[[8,[131]]]],[[9,22],[[8,[130]]]],[[[136,[135]]],[[16,[139]]]],0,[[[136,[135]]],32],0,0,0,0,[[[136,[135]]],[[16,[143]]]],[22,131],0,[[]],[[]],[[]],[[]],[[]],[[],10],[[[136,[135]]],[[16,[140]]]],0,[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],0,[130,129],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[[136,[135]]],[[16,[141]]]],0,0,[[[136,[135]]],131],[131,20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[129,13],8],[[131,13],8],[[130,13],8],[[130,13],8],[[130,13],8],[[130,13],8],[[130,13],8],[[130,13],8],[[130,13],8],0,0,0,0,0,0,0,0,0,0,[[[148,[107,128]],[16,[98]],85,32,58],[[11,[149]]]],[[[148,[107,128]],150,84,87,[66,[79]]],[[11,[149]]]],[[[148,[107,128]],53,151,152],[[11,[153]]]],[[[148,[107,128]],45,32],[[11,[153]]]],[[[148,[107,[0,[128,154]]]],20,20],11],[[[148,[107,[0,[128,154]]]],20,32],11],[[]],[[]],[[]],[[]],[[]],[[]],[[[148,[107,128]]],[[11,[155]]]],[[[148,[107,128]]],[[11,[155]]]],[156,20],[2],[2],[2],[2],[2],[2],[2],[2],[2],[156,[[16,[20]]]],[[[155,[37]],155],5],[[[155,[40]],6],7],[[[155,[39]],6],7],[[]],[[]],[157,155],[[]],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[[148,[107,128]]],[[11,[[155,[158]]]]]],[[20,[16,[20]]],156],[[107,15],[[148,[107,159]]]],[[107,15,[0,[128,154]]],[[148,[107,[0,[128,154]]]]]],[148],[62],[148],[148],[148,15],[[107,15,128],[[148,[107,128]]]],[[],10],[148],[148],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[]],[[]],[[]],[[[148,[107,128]],[160,[156]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[32,32],[[16,[32]]]],[[32,32]],[[]],[[]],[[]],[[]],[[]],[[]],[32,32],[161,161],[157,157],[[]],[[]],[[]],[[32,32],23],[[161,161],23],[2],[2],[2],[2],[2],[2],[2],[2],[2],[32,2],[32],[[32,32],5],[[161,161],5],[[157,157],5],[[32,6],7],[[161,6],7],[[157,6],7],[[157,6],7],[[]],[161,32],[[]],[[]],[26,[[11,[32]]]],[[],[[11,[32]]]],[26,[[11,[32]]]],[26,[[11,[161]]]],[[],[[11,[32]]]],[28,[[11,[32]]]],[28,[[11,[161]]]],[[],[[11,[32]]]],[[],2],[[],2],[[],2],[[]],[[]],[[]],[32,5],[32,5],[[32,2],[[16,[32]]]],[32,32],[[32,32],[[16,[23]]]],[[161,161],[[16,[23]]]],[[32,32],[[16,[32]]]],[[32,32]],[162,[[16,[32]]]],0,[32],[[]],[[]],[[]],[[],10],[163,[[11,[32]]]],[26,[[11,[32]]]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[]],[[]],[[]],[[],32],[[],29],[[],29],[[],29],0,0,0,0,0,[[]],[[]],[2],[2],[2],[[164,6],7],[[]],[[],2],[[]],[[]],[[]],[9,[[8,[165]]]],[9,[[8,[166]]]],[9,[[8,[167]]]],[9,[[8,[168]]]],[9,[[8,[169]]]],[9,[[8,[170]]]],[9,[[8,[[172,[171]]]]]],[9,[[8,[[16,[[138,[173,32]]]]]]]],[9,[[8,[174]]]],[9,[[8,[[176,[175]]]]]],0,[[],11],[[],11],[[],12],[[]],[[13,165],8],[[13,167],8],[[13,169],8],[[13,170],8],[[[16,[138]],13],8],[[13,174],8],[[13,176],8],[2,29],[131,29],0,0,0,0,0,0,0,0,0,0,0,0,0,[[[178,[177]]],88],[[[178,[179]],96],[[178,[180]]]],[[[139,[179]]],[[11,[149]]]],[[[139,[177]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[181,181],[180,180],[[[139,[[0,[35,177]]]]],[[139,[[0,[35,177]]]]]],[[[178,[[0,[35,177]]]]],[[178,[[0,[35,177]]]]]],[182,182],[[[115,[35]]],[[115,[35]]]],[183,183],[184,184],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[115],[184],[115,88],0,[[[178,[177]]],112],[115,112],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[[[115,[108]]],2],[183,2],[184,2],[[[115,[108]]]],[183],[184],[115],[115],[184],0,[115,105],[115,105],[184,105],0,[[181,181],5],0,[[181,6],7],[[180,6],7],[[[139,[[0,[39,177]]]],6],7],[[[178,[177]],6],[[11,[185]]]],[[115,6],[[11,[185]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[115,184],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[183,186],[[115,[186]]]],[[182,88,186,96],[[178,[180]]]],[[]],[[]],[[[139,[177]],[145,[177,177]]],[[139,[177]]]],[[]],[[[178,[177]]],76],[115],[9,[[8,[[178,[180]]]]]],[[],[[8,[182]]]],[[],[[8,[[115,[186]]]]]],[[],[[8,[183]]]],[[9,25],[[8,[88]]]],[9,[[8,[76]]]],[9,[[8,[118]]]],[9,[[8,[96]]]],[9,[[8,[186]]]],[[[178,[177]]],118],[[[139,[177]]]],[[[139,[177]]]],[[[178,[177]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[[139,[177]]],32],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[178,[180]],13],8],[[[115,[186]],13],8],[[[115,[186]],13],8],[[[178,[180]],13],8],[[[178,[177]]]],[115],0,0,0,0,0,0,0,0,0,0,[[[187,[107]],128,[16,[98]],85,119,58],[[11,[149]]]],[[[187,[107]],128,150,84,87,[66,[79]]],[[11,[149]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[187,[107]],128,15,[16,[160]]],[[11,[[16,[[139,[179]]]],149]]]],[188,188],[189,189],[179,179],[[]],[[]],[[]],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[[],189],[[149,149],5],[[189,189],5],[[149,6],7],[[149,6],7],[[188,6],7],[[189,6],7],[[179,6],[[11,[185]]]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[187],[[]],[[]],[[]],[[]],[[]],[15,187],[188],[[189,2],[[16,[2]]]],[187],[[189,2],[[16,[2]]]],0,[[]],[[]],[[]],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],[188,32],[187,32],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[],32],[[],32],[[],29],[131,29],[2,29],0,0,[[]],[[]],[[]],[[]],[143,143],[190,190],[[]],[[]],[2],[2],[2],[2],[2],[2],[[143,6],7],[[190,6],[[11,[185]]]],[[]],[[]],[[],2],[[],2],[[]],[[]],0,0,0,[190,32],[[9,5],[[8,[190]]]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[143,[[16,[32]]]],[[]],[[]],[[190,13],8],0,0,0,0,0,0,0,0,[[[140,[191]],136,134],[[140,[192]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[192,192],[[[140,[[0,[35,193]]]]],[[140,[[0,[35,193]]]]]],[151,151],[[[194,[[0,[35,193]]]]],[[194,[[0,[35,193]]]]]],[152,152],[[]],[[]],[[]],[[]],[[]],[[151,151],23],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[[192,192],5],[[[140,[[0,[37,193]]]],140],5],[[151,151],5],[[[194,[[0,[37,193]]]],194],5],[[152,152],5],0,[[192,6],7],[[[140,[[0,[39,193]]]],6],7],[[151,6],7],[[[194,[[0,[39,193]]]],6],7],[[152,6],7],[[]],[[]],[[]],[[]],[[]],[151],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[[140,[193]]],5],[[]],[[[140,[193]],[144,[193,193]]],[[140,[193]]]],[[]],[151,20],[20,151],[151,[[194,[191]]]],[[151,151],[[16,[23]]]],0,[9,[[8,[151]]]],[[],[[8,[[194,[192]]]]]],[[],[[8,[152]]]],[152,[[16,[45]]]],[152,44],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],[152,32],0,[[[140,[193]]],[[11,[32]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[151,13],8],[[[194,[192]],13],8],[[152,13],8],0,0,0,0,0,[[195,53,151,152],[[11,[153]]]],[[195,45,32],[[11,[153]]]],[[]],[[]],[[]],[[]],[[]],[[]],[195,[[16,[[140,[191]]]]]],[191,191],[[]],[2],[2],[2],[2],[2],[2],[2],[2],[2],[[],195],[[153,153],5],[[153,6],7],[[153,6],7],[[191,6],7],[[]],[[]],[[]],[[],2],[[],2],[[],2],[191,[[31,[32]]]],[191,[[31,[44]]]],[195],[[]],[[]],[[]],[195],[[]],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[195,[[11,[32,157]]]],[[]],[[]],[[]],0,0,[[],152],[[],151],[[],44],[[],32],0,[[],29],[[],29],[[],29],[[],29],[[],29],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[196,196],[[[141,[[0,[35,197]]]]],[[141,[[0,[35,197]]]]]],[198,198],[[[199,[35]]],[[199,[35]]]],[200,200],[[]],[[]],[[]],[[]],[[]],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[[196,196],5],[[[141,[[0,[37,197]]]],141],5],[[198,198],5],[[[199,[37]],199],5],[[200,200],5],0,[[196,6],7],[[[141,[[0,[39,197]]]],6],7],[[198,6],7],[[[199,[39]],6],7],[[200,6],7],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[[141,[201]],136,[31,[[203,[[136,[202]]]]]]],[[11,[[141,[196]],204]]]],[[]],[[[141,[197]],[147,[197,197]]],[[141,[197]]]],[[]],[198,20],[[129,20],198],[[198,20,20],199],[200,34],0,0,[9,[[8,[198]]]],[[],[[8,[199]]]],[[],[[8,[200]]]],0,[[]],[[]],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[198,129],[[],12],[[],12],[[],12],[[],12],[[],12],[200,32],0,0,0,[[]],[[]],[[]],[[]],[[]],0,[[198,13],8],[[199,13],8],[[200,13],8],[[199,13],8],0,0,0,0,0,0,[[205,20,20]],[[205,20,32],[[11,[204]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[205],[201,201],[[]],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[[],205],[[204,204],5],[[201,201],5],[[204,6],7],[[204,6],7],[[201,6],7],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[205],[[]],[[]],[[]],[[]],[205],[[]],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[205,[[11,[32,157]]]],[[]],[[]],[[]],[[]],0,0,[[],200],[[],198],[[],34],[[],32],[22,29],[[],29],[[],29],[[],29],[[],29],[[],29],0,0,0,[[15,2,2],[[11,[32]]]],[[15,2,2],[[11,[32]]]],0,0,0,[[]],[[]],[206,206],[[]],[2],[2],[2],[[206,15,2,2],[[11,[32]]]],[[206,15,2,2],[[11,[32]]]],[206,32],[[206,6],7],[[]],[[],2],[[]],[32,206],[[],206],[[]],[[],11],[[],11],[[],12],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[207,207],[208,208],[[]],[[]],[2],[2],[2],[2],[2],[2],[[208,208],5],[[207,15,2,2],[[11,[32]]]],[[207,6],7],[[208,6],7],[[208,6],7],[[]],[157,208],[[]],[207,2],[[],2],[[],2],[[]],[[]],[207,32],[[32,2,2,2],[[16,[207]]]],[207,2],[207,2],[[],207],[[]],[[]],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[209],[[]],[[]],[[]],[[]],[2],[2],[2],[2],[2],[2],[[]],[[]],[210,57],[[],2],[[],2],[[],[[31,[32]]]],[[],[[31,[44]]]],[[]],[[]],[[136,210,134],209],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[]],[[]],0,0,0,0,0,0,0,0,[[136,210],43],[[136,210,134],43],[22,29],[22,29],[22,29],[[],29],0,0,[[]],[[]],[[]],[[]],[211],[212],[2],[2],[2],[2],[[211,131,22,20,15]],[[212,131,22,20,15]],[[211,[16,[138]]]],[[212,[16,[138]]]],[[211,[16,[139]]]],[[212,[16,[139]]],43],[[211,[16,[140]]]],[[212,[16,[140]]],43],[[211,[16,[141]]]],[[212,[16,[141]]],43],[2],[2],[[]],[[]],[[],2],[[],2],[[]],[[]],[[131,22,134],129],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[],213],[2],[2],[2],[2],[2],[2],[213,8],[[]],[[]],[[],2],[[],2],[[]],[[]],[[[214,[9]]],9],[[[214,[9]]],[[216,[215]]]],[213,[[216,[215]]]],[9,[[214,[9]]]],[[[214,[9]]],[[8,[2]]]],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[]],[[]],[213,[[8,[2]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[55,55],[217,217],[218,218],[219,219],[220,220],[[]],[[]],[[]],[[]],[[]],[[55,55],23],[[55,55,90],55],[[],55],[[],219],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[55,2],[220,2],[55],[220],[[55,55],5],[[217,217],5],[[218,218],5],[[219,219],5],[[220,220],5],[[55,6],7],[[217,6],7],[[218,6],7],[[219,6],7],[[220,6],7],[[]],[20,55],[[]],[[]],[28,219],[20,219],[[]],[[]],[20,217],[55],[220],[219,11],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[],219],[[55,55],[[16,[23]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[[221,219],[[16,[85]]]],[[222,219],[[16,[85]]]],[223],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[222],[223,223],[150,150],[221,221],[222,222],[[]],[[]],[[]],[[]],[[222,85],16],[150],[221],[222],[2],[2],[2],[2],[2],[2],[2],[2],[[150,217],150],[[221,217],[[11,[221]]]],[150,150],[221,221],[[222,84],[[16,[85]]]],[[222,84],[[16,[85]]]],[[223,219],[[16,[84]]]],[[223,84],219],[2],[2],[2],[2],[[223,223],5],[[150,150],5],[[221,221],5],0,[[221,219],16],[[222,219],16],[[223,219],16],[[223,6],7],[[150,6],[[11,[185]]]],[[221,6],[[11,[185]]]],[[222,6],7],[[]],[[]],[[]],[[]],[221,222],[221,222],[[],223],[[],[[11,[150,101]]]],[[],[[16,[222]]]],[150,150],[222,100],0,[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[],223],[[],150],[9,[[8,[150]]]],[9,[[8,[221]]]],[[100,223,219],[[16,[85]]]],[[100,223]],[[100,223]],[[100,223,219],16],0,[150],[222],[150,222],[221,222],[150,221],[[222,220],83],[[222,220],81],[[222,220],98],[[]],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[]],[[]],[[]],[[]],[[150,13],8],[[221,13],8],[[],29],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[224,25],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[225,2],[226,226],[227,227],[225,225],[224,224],[[]],[[]],[[]],[[]],[[227,227],23],[[225,225],23],[[224,224],23],[[],227],[[],225],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[224],[224],[225,2],[[226,226],5],[[227,227],5],[[225,225],5],[[224,224],5],[[226,6],[[11,[185]]]],[[226,6],[[11,[185]]]],[[227,6],[[11,[185]]]],[[227,6],[[11,[185]]]],[[225,6],[[11,[185]]]],[[225,6],[[11,[185]]]],[[224,6],[[11,[185]]]],[[224,6],[[11,[185]]]],[[]],[[]],[[]],[[]],[[],[[11,[224,226]]]],[227,[[11,[224,226]]]],[[],[[11,[224,226]]]],[227,[[11,[224,226]]]],[25,[[11,[224]]]],[225,224],[[227,225],224],[227],[225],[224],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[224,[[31,[57,78]]]],[224,10],[224,227],[[227,227],[[16,[23]]]],[[225,225],[[16,[23]]]],[[224,224],[[16,[23]]]],[224,25],[62],[[]],[[]],[[]],[[]],[224],[[],10],[[],10],[[],10],[[],10],[225,2],[[],11],[[],11],[2,[[11,[225]]]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],[[11,[226]]]],[227,[[11,[226]]]],[[]],[[]],[[]],[[]],[225,2],[[227,25]],[224]],"p":[[3,"BlockHash"],[15,"usize"],[3,"BlockHeader"],[3,"BlockHeaderData"],[15,"bool"],[3,"Formatter"],[6,"Result"],[6,"Result"],[8,"Read"],[3,"String"],[4,"Result"],[3,"TypeId"],[8,"Write"],[4,"NetworkUpgrade"],[3,"BlockHeight"],[4,"Option"],[3,"MainNetwork"],[3,"TestNetwork"],[4,"Network"],[15,"u32"],[4,"Network"],[4,"BranchId"],[4,"Ordering"],[8,"RangeBounds"],[15,"str"],[15,"i64"],[15,"i32"],[15,"u64"],[8,"Strategy"],[3,"PEDERSEN_HASH_EXP_TABLE"],[3,"Vec"],[3,"Amount"],[3,"AuthData"],[3,"Precondition"],[8,"Clone"],[3,"Witness"],[8,"PartialEq"],[4,"Error"],[8,"Debug"],[8,"Display"],[8,"FnOnce"],[8,"FromPayload"],[3,"Hash"],[3,"Script"],[4,"TransparentAddress"],[3,"InternalOvk"],[3,"ExternalOvk"],[3,"AccountPrivKey"],[3,"AccountPubKey"],[3,"ExternalIvk"],[3,"InternalIvk"],[4,"Error"],[3,"SecretKey"],[3,"ExtendedPrivKey"],[3,"AccountId"],[3,"PublicKey"],[15,"u8"],[3,"MemoBytes"],[3,"TextMemo"],[4,"Memo"],[4,"Error"],[3,"Demand"],[8,"Hashable"],[3,"CommitmentTree"],[3,"IncrementalWitness"],[3,"MerklePath"],[3,"Frontier"],[8,"HashSer"],[3,"AuthFragment"],[8,"Ord"],[3,"MerkleBridge"],[8,"Hashable"],[3,"NonEmptyFrontier"],[3,"Position"],[3,"BitSlice"],[3,"Nullifier"],[3,"u5"],[3,"Global"],[3,"Node"],[3,"ProofGenerationKey"],[3,"NullifierDerivingKey"],[3,"ViewingKey"],[3,"SaplingIvk"],[3,"Diversifier"],[3,"PaymentAddress"],[4,"Rseed"],[3,"Note"],[3,"Scalar"],[3,"Altitude"],[3,"Choice"],[3,"Fr"],[3,"SubgroupPoint"],[3,"TryFromSliceError"],[3,"Error"],[3,"PrivateKey"],[3,"Signature"],[4,"BitSpanError"],[3,"OutgoingViewingKey"],[3,"ExpandedSpendingKey"],[3,"FullViewingKey"],[4,"DecodingError"],[8,"Iterator"],[3,"PreparedIncomingViewingKey"],[3,"PreparedEphemeralPublicKey"],[3,"EphemeralKeyBytes"],[3,"OutgoingCipherKey"],[8,"Parameters"],[8,"DynamicUsage"],[3,"SaplingDomain"],[3,"OutPlaintextBytes"],[3,"NotePlaintextBytes"],[3,"ValueCommitment"],[3,"ExtendedPoint"],[3,"NoteEncryption"],[3,"OutputDescription"],[4,"Personalization"],[3,"MockTxProver"],[3,"PublicKey"],[3,"NoteValue"],[3,"ValueSum"],[3,"TrapdoorSum"],[3,"ValueCommitTrapdoor"],[3,"CommitmentSum"],[3,"OverflowError"],[3,"CtOption"],[6,"Scalar"],[8,"Into"],[8,"RngCore"],[3,"TxId"],[3,"Transaction"],[4,"TxVersion"],[3,"TransparentDigests"],[3,"TzeDigests"],[3,"TxDigests"],[8,"Authorization"],[3,"TransactionData"],[8,"TransactionDigest"],[3,"Bundle"],[3,"Bundle"],[3,"Bundle"],[3,"Bundle"],[3,"Authorized"],[3,"Bundle"],[8,"MapAuth"],[8,"MapAuth"],[8,"MapAuth"],[8,"MapAuth"],[3,"Builder"],[4,"Error"],[3,"ExtendedSpendingKey"],[3,"OutPoint"],[3,"TxOut"],[4,"Error"],[8,"CryptoRng"],[4,"Error"],[3,"Progress"],[4,"BalanceError"],[4,"Infallible"],[3,"OsRng"],[3,"Sender"],[3,"NonNegativeAmount"],[8,"IntoIterator"],[3,"ValueSum"],[3,"Unauthorized"],[3,"Action"],[3,"Anchor"],[3,"ExtractedNoteCommitment"],[3,"Flags"],[3,"TransmittedNoteCiphertext"],[3,"Nullifier"],[8,"SigType"],[3,"Signature"],[3,"Authorized"],[3,"ValueCommitment"],[6,"SpendAuth"],[3,"VerificationKey"],[8,"Authorization"],[3,"SpendDescription"],[3,"Unauthorized"],[3,"Authorized"],[3,"Unproven"],[3,"SpendDescriptionV5"],[3,"OutputDescriptionV5"],[3,"CompactOutputDescription"],[3,"Error"],[6,"GrothProofBytes"],[3,"SaplingBuilder"],[3,"SpendDescriptionInfo"],[3,"SaplingMetadata"],[3,"JsDescription"],[3,"Unauthorized"],[3,"Authorized"],[8,"Authorization"],[3,"TxIn"],[3,"TransparentBuilder"],[3,"Authorized"],[8,"Authorization"],[3,"OutPoint"],[3,"TzeIn"],[3,"TzeOut"],[3,"Unauthorized"],[3,"Unauthorized"],[3,"TzeSigner"],[4,"Error"],[3,"TzeBuilder"],[3,"FeeRule"],[3,"FeeRule"],[4,"FeeError"],[3,"SignatureHash"],[4,"SignableInput"],[3,"TxIdDigester"],[3,"BlockTxCommitmentDigester"],[3,"HashWriter"],[3,"HashReader"],[3,"Sha256"],[6,"Output"],[4,"ChildIndex"],[3,"ChainCode"],[3,"DiversifierIndex"],[4,"Scope"],[3,"ExtendedFullViewingKey"],[3,"DiversifiableFullViewingKey"],[3,"DiversifierKey"],[3,"Mnemonic"],[4,"Count"],[4,"Error"],[4,"Language"],[8,"ExtensionTxBuilder"],[8,"Extension"],[8,"ToPayload"],[8,"IncomingViewingKey"],[13,"LengthInvalid"],[8,"TxProver"],[3,"BatchEntry"],[4,"DigestError"],[8,"InputView"],[8,"OutputView"],[8,"InputView"],[8,"OutputView"],[8,"InputView"],[8,"OutputView"],[8,"FeeRule"],[8,"FutureFeeRule"],[8,"TransparentAuthorizingContext"],[13,"Transparent"],[13,"Tze"]]},\
"zcash_proofs":{"doc":"<em>Zcash circuits and proofs.</em>","t":[17,17,17,3,3,11,11,11,11,0,11,11,0,5,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,5,12,12,12,5,0,0,12,12,12,0,12,11,11,11,11,11,11,11,11,11,0,0,0,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,4,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,3,3,17,3,12,12,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,3,3,3,3,3,3,3,17,3,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,6,6,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,5,5],"n":["SAPLING_OUTPUT_NAME","SAPLING_SPEND_NAME","SPROUT_NAME","SaplingParameterPaths","ZcashParameters","borrow","borrow","borrow_mut","borrow_mut","circuit","clone","clone_into","constants","default_params_folder","deref","deref","deref_mut","deref_mut","download_parameters","download_sapling_parameters","download_sprout_parameters","drop","drop","eq","fmt","from","from","init","init","into","into","load_parameters","output","output_params","output_vk","parse_parameters","prover","sapling","spend","spend_params","spend_vk","sprout","sprout_vk","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","ecc","pedersen_hash","sapling","sprout","EdwardsPoint","MontgomeryPoint","add","add","assert_not_small_order","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","conditionally_select","deref","deref","deref_mut","deref_mut","double","drop","drop","fixed_base_multiplication","from","from","get_u","get_v","init","init","inputize","interpret","interpret_unchecked","into","into","into_edwards","mul","repr","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","witness","MerkleTree","NoteCommitment","Personalization","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","from","get_bits","init","into","pedersen_hash","to_owned","try_from","try_into","type_id","vzip","Output","Spend","TREE_DEPTH","ValueCommitmentOpening","anchor","ar","auth_path","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","commitment_randomness","commitment_randomness","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","esk","from","from","from","init","init","init","into","into","into","payment_address","payment_address","proof_generation_key","randomness","synthesize","synthesize","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value","value_commitment_opening","value_commitment_opening","vzip","vzip","vzip","CommitmentRandomness","JoinSplit","JsInput","JsOutput","NoteValue","PayingKey","SpendingKey","TREE_DEPTH","UniqueRandomness","a_pk","a_sk","auth_path","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","from","from","from","from","from","from","from","from","h_sig","init","init","init","init","init","init","init","init","inputs","into","into","into","into","into","into","into","into","outputs","phi","r","r","rho","rt","synthesize","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value","vpub_new","vpub_old","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","FixedGenerator","FixedGeneratorOwned","NOTE_COMMITMENT_RANDOMNESS_GENERATOR","NULLIFIER_POSITION_GENERATOR","PROOF_GENERATION_KEY_GENERATOR","SPENDING_KEY_GENERATOR","VALUE_COMMITMENT_RANDOMNESS_GENERATOR","VALUE_COMMITMENT_VALUE_GENERATOR","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","from","from","from","from","from","from","generate_circuit_generator","init","init","init","init","init","init","into","into","into","into","into","into","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","LocalTxProver","binding_sig","borrow","borrow_mut","bundled","deref","deref_mut","drop","from","from_bytes","init","into","new","new_sapling_proving_context","output_proof","spend_proof","try_from","try_into","type_id","vzip","with_default_location","BatchValidator","SaplingProvingContext","SaplingVerificationContext","binding_sig","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check_bundle","check_output","check_spend","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","final_check","from","from","from","init","init","init","into","into","into","new","new","new","output_proof","spend_proof","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","validate","vzip","vzip","vzip","WITNESS_PATH_SIZE","create_proof","verify_proof"],"q":["zcash_proofs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_proofs::circuit","","","","zcash_proofs::circuit::ecc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_proofs::circuit::pedersen_hash","","","","","","","","","","","","","","","","","","","","zcash_proofs::circuit::sapling","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_proofs::circuit::sprout","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_proofs::constants","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_proofs::prover","","","","","","","","","","","","","","","","","","","","","zcash_proofs::sapling","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","zcash_proofs::sprout","",""],"d":["The sapling output parameters file name.","The sapling spend parameters file name.","The sprout parameters file name.","The paths to the Sapling parameter files.","Zcash Sprout and Sapling groth16 circuit parameters.","","","","","Implementations of the Zcash circuits and Zcash-specific …","","","Various constants used for the Zcash proofs.","Returns the default folder that the Zcash proving …","","","","","Download the Zcash Sapling parameters if needed, and store …","Download the Zcash Sapling parameters if needed, and store …","Download the Zcash Sprout parameters if needed, and store …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Load the specified parameters, checking the sizes and …","The path to the Sapling output parameter file.","","","Parse Bls12 keys from bytes as serialized by …","Abstractions over the proving system and parameters for …","Helpers for creating Sapling proofs.","The path to the Sapling spend parameter file.","","","APIs for creating and verifying Sprout proofs.","","","","","","","","","","","Gadgets implementing Jubjub elliptic curve operations.","Gadget for Zcash’s Pedersen hash.","The Sapling circuits.","The “hybrid Sprout” circuit.","","","Performs an affine point addition, not defined for points …","Perform addition between any two points","","","","","","","","Returns <code>self</code> if condition is true, and the neutral element …","","","","","","","","Perform a fixed-base scalar multiplication with <code>by</code> being …","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Interprets an (x, y) pair as a point in Montgomery, does …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts an element in the prime order subgroup into a …","Performs a scalar multiplication of this twisted Edwards …","This converts the point into a representation.","","","","","","","","","","This ‘witnesses’ a point inside the constraint system. …","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","This is an output circuit instance.","This is an instance of the <code>Spend</code> circuit.","","The opening (value and randomness) of a Sapling value …","The anchor; the root of the tree. If the note being spent …","Re-randomization of the public key","The authentication path of the commitment in the tree","","","","","","","","","The randomness of the note commitment","The randomness used to hide the note commitment data","","","","","","","","","","The ephemeral secret key for DH with recipient","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The payment address associated with the note","The payment address of the recipient","Key required to construct proofs for spending notes for a …","","","","","","","","","","","","","","","The opening of a Pedersen commitment to the value being …","The opening of a Pedersen commitment to the value being …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reference to a circuit version of a generator for …","Circuit version of a generator for fixed-base salar …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates the 3-bit window table <code>[0, 1, ..., 8]</code> for …","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","An implementation of <code>TxProver</code> using Sapling Spend and …","","","","Creates a <code>LocalTxProver</code> using Sapling parameters bundled …","","","","Returns the argument unchanged.","Creates a <code>LocalTxProver</code> using parameters specified as byte …","","Calls <code>U::from(self)</code>.","Creates a <code>LocalTxProver</code> using parameters from the given …","","","","","","","","Attempts to create a <code>LocalTxProver</code> using parameters from …","Batch validation context for Sapling.","A context object for creating the Sapling components of a …","A context object for verifying the Sapling components of a …","Create the bindingSig for a Sapling transaction. All calls …","","","","","","","Checks the bundle against Sapling-specific consensus …","Perform consensus checks on a Sapling OutputDescription, …","Perform consensus checks on a Sapling SpendDescription, …","","","","","","","","","","","","Perform consensus checks on the valueBalance and …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Construct a new context to be used with a single …","Construct a new context to be used with a single …","Constructs a new batch validation context.","Create the value commitment and proof for a Sapling …","Create the value commitment, re-randomized key, and proof …","","","","","","","","","","Batch-validates the accumulated bundles.","","","","","Sprout JoinSplit proof generation.","Sprout JoinSplit proof verification."],"i":[0,0,0,0,0,12,1,12,1,0,1,1,0,0,12,1,12,1,0,0,0,12,1,1,1,12,1,12,1,12,1,0,1,12,12,0,0,0,1,12,12,0,12,1,12,1,12,1,12,1,12,1,0,0,0,0,0,0,15,17,17,15,17,15,17,17,17,17,15,17,15,17,17,15,17,0,15,17,17,17,15,17,17,17,15,15,17,15,17,17,17,15,17,15,17,15,17,15,17,17,25,25,0,25,25,25,25,25,25,25,25,25,25,25,0,25,25,25,25,25,0,0,0,0,28,28,28,28,29,27,28,29,27,27,27,28,29,28,29,27,28,29,27,28,29,27,29,28,29,27,28,29,27,28,29,27,28,29,28,27,28,29,27,28,29,27,28,29,27,28,29,27,27,28,29,28,29,27,0,0,0,0,0,0,0,0,0,63,64,64,65,66,67,68,30,64,63,69,65,66,67,68,30,64,63,69,65,66,67,68,30,64,63,69,65,66,67,68,30,64,63,69,65,66,67,68,30,64,63,69,65,66,67,68,30,64,63,69,30,65,66,67,68,30,64,63,69,30,65,66,67,68,30,64,63,69,30,30,64,63,64,30,30,65,66,67,68,30,64,63,69,65,66,67,68,30,64,63,69,65,66,67,68,30,64,63,69,64,63,30,30,65,66,67,68,30,64,63,69,0,0,0,0,0,0,0,0,31,33,34,35,36,37,31,33,34,35,36,37,31,31,33,33,34,34,35,35,36,36,37,37,31,33,34,35,36,37,31,33,34,35,36,37,31,33,34,35,36,37,0,31,33,34,35,36,37,31,33,34,35,36,37,31,33,34,35,36,37,31,33,34,35,36,37,31,33,34,35,36,37,31,33,34,35,36,37,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,0,0,0,49,49,53,50,49,53,50,50,53,53,49,50,49,53,50,49,53,50,49,53,50,53,49,53,50,49,53,50,49,53,50,49,53,50,49,49,49,53,50,49,53,50,49,53,50,50,49,53,50,0,0,0],"f":[0,0,0,0,0,[[]],[[]],[[]],[[]],0,[1,1],[[]],0,[[],[[3,[2]]]],[4],[4],[4],[4],[[],[[6,[5]]]],[[[3,[7]]],[[6,[1,5]]]],[[[3,[7]]],[[6,[2,5]]]],[4],[4],[[1,1],8],[[1,9],10],[[]],[[]],[[],4],[[],4],[[]],[[]],[[11,11,[3,[11]]],12],0,0,0,[[13,13,[3,[13]]],12],0,0,0,0,0,0,0,[[]],[[],6],[[],6],[[],6],[[],6],[[],14],[[],14],[[]],[[]],0,0,0,0,0,0,[[15,15],[[6,[15,16]]]],[[17,17],[[6,[17,16]]]],[17,[[6,[16]]]],[[]],[[]],[[]],[[]],[17,17],[[]],[[17,18],[[6,[17,16]]]],[4],[4],[4],[4],[17,[[6,[17,16]]]],[4],[4],[19,[[6,[17,16]]]],[[]],[[]],[17,20],[17,20],[[],4],[[],4],[17,[[6,[16]]]],[[20,20],[[6,[17,16]]]],[[[22,[21]],[22,[21]]],15],[[]],[[]],[15,[[6,[17,16]]]],[17,[[6,[17,16]]]],[17,[[6,[[23,[18]],16]]]],[[]],[[],6],[[],6],[[],6],[[],6],[[],14],[[],14],[[]],[[]],[[[3,[24]]],[[6,[17,16]]]],0,0,0,[[]],[[]],[25,25],[[]],[4],[4],[4],[[]],[25,[[23,[8,26]]]],[[],4],[[]],[25,[[6,[17,16]]]],[[]],[[],6],[[],6],[[],14],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[27,27],[[]],0,0,[4],[4],[4],[4],[4],[4],[4],[4],[4],0,[[]],[[]],[[]],[[],4],[[],4],[[],4],[[]],[[]],[[]],0,0,0,0,[28,[[6,[16]]]],[29,[[6,[16]]]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],14],[[],14],[[],14],0,0,0,[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[30,[[6,[16]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[31,32],[4],[4],[33,32],[4],[34,32],[35,32],[4],[36,32],[4],[37,32],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[]],[[]],[[]],[[]],[[]],[[]],[38,32],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[]],[[]],[[]],[[]],[[]],[[]],0,[[39,40],[[6,[41]]]],[[]],[[]],[[],39],[4],[4],[4],[[]],[[],39],[[],4],[[]],[[11,11],39],[39],[[39,42,43,42,7]],[[39,44,45,46,42,7,21,[48,[47]]],6],[[],6],[[],6],[[],14],[[]],[[],[[3,[39]]]],0,0,0,[[49,40],[[6,[41]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[50,[52,[51]]],8],[[53,54,21,24,[56,[55]],57],8],[[53,54,21,58,41,[56,[55]],57],8],[[],49],[[],50],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[53,40,41],8],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[],49],[8,53],[[],50],[[49,42,43,42,7,59]],[[49,44,45,46,42,7,21,[48,[47]],59,57],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],14],[[],14],[[],14],[[50,60,60,[0,[61,62]]],8],[[]],[[]],[[]],0,[[7,7,7,7,7,7,59],[[56,[55]]]],[[7,7,57],8]],"p":[[3,"SaplingParameterPaths"],[3,"PathBuf"],[4,"Option"],[15,"usize"],[4,"Error"],[4,"Result"],[15,"u64"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Path"],[3,"ZcashParameters"],[8,"Read"],[3,"TypeId"],[3,"MontgomeryPoint"],[4,"SynthesisError"],[3,"EdwardsPoint"],[4,"Boolean"],[6,"FixedGenerator"],[3,"AllocatedNum"],[3,"Scalar"],[3,"Num"],[3,"Vec"],[3,"ExtendedPoint"],[4,"Personalization"],[3,"Global"],[3,"ValueCommitmentOpening"],[3,"Spend"],[3,"Output"],[3,"JoinSplit"],[3,"PROOF_GENERATION_KEY_GENERATOR"],[6,"FixedGeneratorOwned"],[3,"NOTE_COMMITMENT_RANDOMNESS_GENERATOR"],[3,"NULLIFIER_POSITION_GENERATOR"],[3,"VALUE_COMMITMENT_VALUE_GENERATOR"],[3,"VALUE_COMMITMENT_RANDOMNESS_GENERATOR"],[3,"SPENDING_KEY_GENERATOR"],[3,"SubgroupPoint"],[3,"LocalTxProver"],[3,"Amount"],[3,"Signature"],[3,"Fr"],[3,"PaymentAddress"],[3,"ProofGenerationKey"],[3,"Diversifier"],[4,"Rseed"],[3,"Node"],[3,"MerklePath"],[3,"SaplingProvingContext"],[3,"BatchValidator"],[3,"Authorized"],[3,"Bundle"],[3,"SaplingVerificationContext"],[3,"ValueCommitment"],[3,"Bls12"],[3,"Proof"],[3,"PreparedVerifyingKey"],[3,"PublicKey"],[3,"Parameters"],[3,"VerifyingKey"],[8,"RngCore"],[8,"CryptoRng"],[3,"JsOutput"],[3,"JsInput"],[3,"SpendingKey"],[3,"PayingKey"],[3,"UniqueRandomness"],[3,"CommitmentRandomness"],[3,"NoteValue"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
